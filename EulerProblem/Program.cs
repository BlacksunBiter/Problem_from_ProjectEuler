using System;

namespace EulerProblem
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("Multiples of 3 or 5");
            Console.WriteLine("\n If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9.The sum of these multiples is 23.");
            Console.WriteLine("Find the sum of all the multiples of 3 or 5 below 1000.");
            Multiples(new int[] { 3, 5 }, 1000);


            Console.WriteLine("Even Fibonacci numbers");
            Console.WriteLine("Each new term in the Fibonacci sequence is generated by adding the previous two terms.By starting with 1 and 2, the first 10 terms will be:");
            Console.WriteLine(" 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...");
            Console.WriteLine("By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.");
            FibonacciMethodOne(4000000);


            Console.WriteLine("Largest prime factor");
            Console.WriteLine("The prime factors of 13195 are 5, 7, 13 and 29.");
            Console.WriteLine("What is the largest prime factor of the number 600851475143 ?");
            //PrimeFactor(600851475143);


            Console.WriteLine("A palindromic number reads the same both ways. The largest palindrome made from the product of two 2 - digit numbers is 9009 = 91 * 99.");
            Console.WriteLine("Find the largest palindrome made from the product of two 3 - digit numbers.");
            Palindrome(999);


            Console.WriteLine("2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.");
            Console.WriteLine("What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20 ?");
            SmallestMultiple(11, 20);


            Console.WriteLine("The sum of the squares of the first ten natural numbers is,");
            Console.WriteLine("1^2+2^2+...+10^2=385");
            Console.WriteLine("The square of the sum of the first ten natural numbers is,");
            Console.WriteLine("(1+2+...+10)^2=3025");
            Console.WriteLine("Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is");
            Console.WriteLine("3025-385=2640.");
            Console.WriteLine("Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.");
            SumSquareDifference(100);


            Console.WriteLine("By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.");
            Console.WriteLine("What is the 10 001st prime number ?");
            Prime10001st();


            Console.WriteLine("The four adjacent digits in the 1000 - digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.");
            Console.WriteLine("73167176531330624919225119674426574742355349194934");
            Console.WriteLine("96983520312774506326239578318016984801869478851843");
            Console.WriteLine("85861560789112949495459501737958331952853208805511");
            Console.WriteLine("12540698747158523863050715693290963295227443043557");
            Console.WriteLine("66896648950445244523161731856403098711121722383113");
            Console.WriteLine("62229893423380308135336276614282806444486645238749");
            Console.WriteLine("30358907296290491560440772390713810515859307960866");
            Console.WriteLine("70172427121883998797908792274921901699720888093776");
            Console.WriteLine("65727333001053367881220235421809751254540594752243");
            Console.WriteLine("52584907711670556013604839586446706324415722155397");
            Console.WriteLine("53697817977846174064955149290862569321978468622482");
            Console.WriteLine("83972241375657056057490261407972968652414535100474");
            Console.WriteLine("82166370484403199890008895243450658541227588666881");
            Console.WriteLine("16427171479924442928230863465674813919123162824586");
            Console.WriteLine("17866458359124566529476545682848912883142607690042");
            Console.WriteLine("24219022671055626321111109370544217506941658960408");
            Console.WriteLine("07198403850962455444362981230987879927244284909188");
            Console.WriteLine("84580156166097919133875499200524063689912560717606");
            Console.WriteLine("05886116467109405077541002256983155200055935729725");
            Console.WriteLine("71636269561882670428252483600823257530420752963450");
            Console.WriteLine("Find the thirteen adjacent digits in the 1000 - digit number that have the greatest product. What is the value of this product ?");
            LargestProductInASeriesMethodOne(13);
            LargestProductInASeriesMethodTwo(13);


            Console.WriteLine("A Pythagorean triplet is a set of three natural numbers, a < b < c, for which,");
            Console.WriteLine("a^2 + b^2 = c^2");
            Console.WriteLine("For example, 3^2 + 4^2 = 9 + 16 = 25 = 5^2.");
            Console.WriteLine("There exists exactly one Pythagorean triplet for which a + b + c = 1000.");
            Console.WriteLine("Find the product abc.");
            SpecialPythagoreanTriplet();


            Console.WriteLine("The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.");
            Console.WriteLine("Find the sum of all the primes below two million.");
            //SummationOfPrimes(2000000);


            Console.WriteLine("In the 20×20 grid below, four numbers along a diagonal line have been marked in red.");
            Console.WriteLine("08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08");
            Console.WriteLine("49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00");
            Console.WriteLine("81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65");
            Console.WriteLine("52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91");
            Console.WriteLine("22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80");
            Console.WriteLine("24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50");
            Console.Write("32 98 81 28 64 23 67 10 "); Console.ForegroundColor = ConsoleColor.Red; Console.Write("26"); Console.ResetColor(); Console.WriteLine(" 38 40 67 59 54 70 66 18 38 64 70");
            Console.Write("67 26 20 68 02 62 12 20 95 "); Console.ForegroundColor = ConsoleColor.Red; Console.Write("63"); Console.ResetColor(); Console.WriteLine(" 94 39 63 08 40 91 66 49 94 21");
            Console.Write("24 55 58 05 66 73 99 26 97 17 "); Console.ForegroundColor = ConsoleColor.Red; Console.Write("78"); Console.ResetColor(); Console.WriteLine(" 78 96 83 14 88 34 89 63 72");
            Console.Write("21 36 23 09 75 00 76 44 20 45 35 "); Console.ForegroundColor = ConsoleColor.Red; Console.Write("14"); Console.ResetColor(); Console.WriteLine(" 00 61 33 97 34 31 33 95");
            Console.WriteLine("78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92");
            Console.WriteLine("16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57");
            Console.WriteLine("86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58");
            Console.WriteLine("19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40");
            Console.WriteLine("04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66");
            Console.WriteLine("88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69");
            Console.WriteLine("04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36");
            Console.WriteLine("20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16");
            Console.WriteLine("20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54");
            Console.WriteLine("01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48");
            Console.WriteLine("The product of these numbers is 26 × 63 × 78 × 14 = 1788696.");
            Console.WriteLine("What is the greatest product of four adjacent numbers in the same direction(up, down, left, right, or diagonally) in the 20x20 grid ?");
            LargestProductInAGrid();


            Console.WriteLine("The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.The first ten terms would be:");
            Console.WriteLine("                                  1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...");
            Console.WriteLine("Let us list the factors of the first seven triangle numbers:");
            Console.WriteLine("     1: 1");
            Console.WriteLine("     3: 1,3");
            Console.WriteLine("     6: 1,2,3,6");
            Console.WriteLine("     10: 1,2,5,10");
            Console.WriteLine("     15: 1,3,5,15");
            Console.WriteLine("     21: 1,3,7,21");
            Console.WriteLine("     28: 1,2,4,7,14,28");
            Console.WriteLine("We can see that 28 is the first triangle number to have over five divisors.");
            Console.WriteLine("What is the value of the first triangle number to have over five hundred divisors ?");
            HighlyDivisibleTriangularNumber();


            Console.WriteLine("Work out the first ten digits of the sum of the following one - hundred 50 - digit numbers.");
            #region Big numbers
            Console.WriteLine("37107287533902102798797998220837590246510135740250\n" +
             "46376937677490009712648124896970078050417018260538\n" +
             "74324986199524741059474233309513058123726617309629\n" +
             "91942213363574161572522430563301811072406154908250\n" +
             "23067588207539346171171980310421047513778063246676\n" +
             "89261670696623633820136378418383684178734361726757\n" +
             "28112879812849979408065481931592621691275889832738\n" +
             "44274228917432520321923589422876796487670272189318\n" +
             "47451445736001306439091167216856844588711603153276\n" +
             "70386486105843025439939619828917593665686757934951\n" +
             "62176457141856560629502157223196586755079324193331\n" +
             "64906352462741904929101432445813822663347944758178\n" +
             "92575867718337217661963751590579239728245598838407\n" +
             "58203565325359399008402633568948830189458628227828\n" +
             "80181199384826282014278194139940567587151170094390\n" +
             "35398664372827112653829987240784473053190104293586\n" +
             "86515506006295864861532075273371959191420517255829\n" +
             "71693888707715466499115593487603532921714970056938\n" +
             "54370070576826684624621495650076471787294438377604\n" +
             "53282654108756828443191190634694037855217779295145\n" +
             "36123272525000296071075082563815656710885258350721\n" +
             "45876576172410976447339110607218265236877223636045\n" +
             "17423706905851860660448207621209813287860733969412\n" +
             "81142660418086830619328460811191061556940512689692\n" +
             "51934325451728388641918047049293215058642563049483\n" +
             "62467221648435076201727918039944693004732956340691\n" +
             "15732444386908125794514089057706229429197107928209\n" +
             "55037687525678773091862540744969844508330393682126\n" +
             "18336384825330154686196124348767681297534375946515\n" +
             "80386287592878490201521685554828717201219257766954\n" +
             "78182833757993103614740356856449095527097864797581\n" +
             "16726320100436897842553539920931837441497806860984\n" +
             "48403098129077791799088218795327364475675590848030\n" +
             "87086987551392711854517078544161852424320693150332\n" +
             "59959406895756536782107074926966537676326235447210\n" +
             "69793950679652694742597709739166693763042633987085\n" +
             "41052684708299085211399427365734116182760315001271\n" +
             "65378607361501080857009149939512557028198746004375\n" +
             "35829035317434717326932123578154982629742552737307\n" +
             "94953759765105305946966067683156574377167401875275\n" +
             "88902802571733229619176668713819931811048770190271\n" +
             "25267680276078003013678680992525463401061632866526\n" +
             "36270218540497705585629946580636237993140746255962\n" +
             "24074486908231174977792365466257246923322810917141\n" +
             "91430288197103288597806669760892938638285025333403\n" +
             "34413065578016127815921815005561868836468420090470\n" +
             "23053081172816430487623791969842487255036638784583\n" +
             "11487696932154902810424020138335124462181441773470\n" +
             "63783299490636259666498587618221225225512486764533\n" +
             "67720186971698544312419572409913959008952310058822\n" +
             "95548255300263520781532296796249481641953868218774\n" +
             "76085327132285723110424803456124867697064507995236\n" +
             "37774242535411291684276865538926205024910326572967\n" +
             "23701913275725675285653248258265463092207058596522\n" +
             "29798860272258331913126375147341994889534765745501\n" +
             "18495701454879288984856827726077713721403798879715\n" +
             "38298203783031473527721580348144513491373226651381\n" +
             "34829543829199918180278916522431027392251122869539\n" +
             "40957953066405232632538044100059654939159879593635\n" +
             "29746152185502371307642255121183693803580388584903\n" +
             "41698116222072977186158236678424689157993532961922\n" +
             "62467957194401269043877107275048102390895523597457\n" +
             "23189706772547915061505504953922979530901129967519\n" +
             "86188088225875314529584099251203829009407770775672\n" +
             "11306739708304724483816533873502340845647058077308\n" +
             "82959174767140363198008187129011875491310547126581\n" +
             "97623331044818386269515456334926366572897563400500\n" +
             "42846280183517070527831839425882145521227251250327\n" +
             "55121603546981200581762165212827652751691296897789\n" +
             "32238195734329339946437501907836945765883352399886\n" +
             "75506164965184775180738168837861091527357929701337\n" +
             "62177842752192623401942399639168044983993173312731\n" +
             "32924185707147349566916674687634660915035914677504\n" +
             "99518671430235219628894890102423325116913619626622\n" +
             "73267460800591547471830798392868535206946944540724\n" +
             "76841822524674417161514036427982273348055556214818\n" +
             "97142617910342598647204516893989422179826088076852\n" +
             "87783646182799346313767754307809363333018982642090\n" +
             "10848802521674670883215120185883543223812876952786\n" +
             "71329612474782464538636993009049310363619763878039\n" +
             "62184073572399794223406235393808339651327408011116\n" +
             "66627891981488087797941876876144230030984490851411\n" +
             "60661826293682836764744779239180335110989069790714\n" +
             "85786944089552990653640447425576083659976645795096\n" +
             "66024396409905389607120198219976047599490197230297\n" +
             "64913982680032973156037120041377903785566085089252\n" +
             "16730939319872750275468906903707539413042652315011\n" +
             "94809377245048795150954100921645863754710598436791\n" +
             "78639167021187492431995700641917969777599028300699\n" +
             "15368713711936614952811305876380278410754449733078\n" +
             "40789923115535562561142322423255033685442488917353\n" +
             "44889911501440648020369068063960672322193204149535\n" +
             "41503128880339536053299340368006977710650566631954\n" +
             "81234880673210146739058568557934581403627822703280\n" +
             "82616570773948327592232845941706525094512325230608\n" +
             "22918802058777319719839450180888072429661980811197\n" +
             "77158542502016545090413245809786882778948721859617\n" +
             "72107838435069186155435662884062257473692284509516\n" +
             "20849603980134001723930671666823555245252804609722\n" +
             "53503534226472524250874054075591789781264330331690\n");
            #endregion
            LargeSum();


            Console.WriteLine("The following iterative sequence is defined for the set of positive integers:");
            Console.WriteLine("            n → n / 2(n is even)");
            Console.WriteLine("            n → 3n + 1(n is odd)");
            Console.WriteLine("Using the rule above and starting with 13, we generate the following sequence:");
            Console.WriteLine("            13 → 40 → 20 → 10 → 5 → 16 → 8 → 4 → 2 → 1");
            Console.WriteLine("It can be seen that this sequence(starting at 13 and finishing at 1) contains 10 terms.Although it has not been proved yet(Collatz Problem), it is thought that all starting numbers finish at 1.");
            Console.WriteLine("Which starting number, under one million, produces the longest chain ?");
            Console.WriteLine("NOTE : Once the chain starts the terms are allowed to go above one million.");
            LongestCollatzSequence();


            Console.WriteLine("Starting in the top left corner of a 2×2 grid, and only being able to move to the right and down, there are exactly 6 routes to the bottom right corner.");
            Console.WriteLine("How many such routes are there through a 20×20 grid ?");
            Console.WriteLine("Solution: " + (LatticePaths(20)));




        }
        #region Multiples
        static void Multiples(int[] numberMultiples, int maxNumber)
        {
            //sort vector numberMultiples
            int max = maxNumber;
            int sum = 0;
            for (int i = 0; i < numberMultiples.Length; i++)
            {
                Console.WriteLine("natural numbers are multiples of " + numberMultiples[i]);
                while (max > 1)
                {
                    if (max % numberMultiples[i] == 0)
                    {
                        Console.Write(max + " ");
                        sum += max;
                    }
                    max--;

                }
                max = maxNumber;
                Console.WriteLine("");
            }
            Console.WriteLine("sum of all the multiples of 3 or 5 below 1000 = " + sum);
        }
        #endregion

        #region Fibonacci
        static void FibonacciMethodOne(int maxValues)
        {
            int valueFirst, valueSecond;
            int sum = 0;
            valueFirst = valueSecond = 1;
            do
            {
                Console.Write(valueFirst + " ");
                if (valueFirst % 2 == 0)
                    sum += valueFirst;
                valueFirst += valueSecond;
                valueSecond = valueFirst - valueSecond;
            } while (valueFirst < maxValues);
            Console.WriteLine("");
            Console.WriteLine("the sum of the even-valued terms = " + sum);

        }
        #endregion

        #region PrimeFactor
        static void PrimeFactor(long number)
        {
            int[] primeNumbers = { 2 };
            bool coffecent;
            int primeNumber = 1;
            int max = 1;
            long multipler = (long)Math.Sqrt(number);
            while (multipler > primeNumber)
            {
                primeNumber += 2;
                coffecent = true;
                if (primeNumber % 5 == 0 && primeNumber > 10)
                {
                    continue;
                }
                for (int i = 0; i < primeNumbers.Length; i++)
                {
                    if (primeNumber % primeNumbers[i] == 0)
                    {
                        coffecent = false;
                        break;
                    }
                }
                if (coffecent)
                {
                    primeNumbers = IncreaseVector(primeNumbers, primeNumber);
                    if (number % primeNumber == 0)
                    {
                        max = primeNumber;
                        Console.Write(primeNumber + " ");
                    }
                }
            }
            Console.WriteLine();
            Console.WriteLine(max);
        }

        static int[] IncreaseVector(int[] vector, int newValue)
        {
            int[] newVector = new int[vector.Length + 1];
            for (int i = 0; i < vector.Length; i++)
            {
                newVector[i] = vector[i];
            }
            newVector[vector.Length] = newValue;
            return newVector;

        }
        #endregion

        #region Palindrome
        static void Palindrome(int max)
        {
            string number, firstHalf = "", secondHalf = "";
            int largest = 0;
            for (int i = 11; i <= max; i++)
            {
                for (int j = 11; j <= max; j++)
                {
                    number = (i * j).ToString();
                    for (int k = 0; k < number.Length / 2; k++)
                    {
                        firstHalf += number[k];
                        secondHalf += number[number.Length - 1 - k];
                    }
                    if (firstHalf == secondHalf && largest < i * j)
                        //Console.WriteLine(number + " = " + i + " * " + j);
                        largest = i * j;
                    firstHalf = "";
                    secondHalf = "";
                }
            }
            Console.WriteLine(largest);
        }
        #endregion

        #region SmallestMultiple
        static void SmallestMultiple(int min, int max)
        {
            int multiple = max * (max - 1);
            bool otvet = false;
            do
            {
                otvet = false;
                multiple += max;
                for (int i = max - 1; i >= min; i--)
                {
                    if (multiple % i != 0)
                    {
                        otvet = true;
                        break;
                    }
                }
            } while (otvet);
            Console.WriteLine(multiple);
        }
        #endregion

        #region SumSquareDifference
        static void SumSquareDifference(int nutNumbers)
        {
            int squareSum = 0;
            int sumSquare = 0;
            for (int i = 1; i <= nutNumbers; i++)
            {
                sumSquare += i * i;
                squareSum += i;
            }
            squareSum = squareSum * squareSum;
            Console.WriteLine("Difference: " + (squareSum - sumSquare));
        }
        #endregion

        #region 10001st prime
        static void Prime10001st()
        {
            int[] primeNumbers = { 2 };
            int primeNumber = 1;

            bool coffecent;
            while (primeNumbers.Length < 10001)
            {
                primeNumber += 2;
                coffecent = true;
                if (primeNumber % 5 == 0 && primeNumber > 10)
                {
                    continue;
                }
                for (int i = 0; i < primeNumbers.Length; i++)
                {
                    if (primeNumber % primeNumbers[i] == 0)
                    {
                        coffecent = false;
                        break;
                    }
                }
                if (coffecent)
                {
                    primeNumbers = IncreaseVector(primeNumbers, primeNumber);
                }
            }
            Console.WriteLine(primeNumbers[primeNumbers.Length - 1]);
        }
        #endregion

        #region Largest product in a series
        static void LargestProductInASeriesMethodOne(int nDigit)
        {
            string Series = "73167176531330624919225119674426574742355349194934" +
                            "96983520312774506326239578318016984801869478851843" +
                            "85861560789112949495459501737958331952853208805511" +
                            "12540698747158523863050715693290963295227443043557" +
                            "66896648950445244523161731856403098711121722383113" +
                            "62229893423380308135336276614282806444486645238749" +
                            "30358907296290491560440772390713810515859307960866" +
                            "70172427121883998797908792274921901699720888093776" +
                            "65727333001053367881220235421809751254540594752243" +
                            "52584907711670556013604839586446706324415722155397" +
                            "53697817977846174064955149290862569321978468622482" +
                            "83972241375657056057490261407972968652414535100474" +
                            "82166370484403199890008895243450658541227588666881" +
                            "16427171479924442928230863465674813919123162824586" +
                            "17866458359124566529476545682848912883142607690042" +
                            "24219022671055626321111109370544217506941658960408" +
                            "07198403850962455444362981230987879927244284909188" +
                            "84580156166097919133875499200524063689912560717606" +
                            "05886116467109405077541002256983155200055935729725" +
                            "71636269561882670428252483600823257530420752963450";
            string sum = "";
            int largest = 0;
            for (int i = 0; i < 1000; i++)
            {
                if (Series[i] == '0')
                {
                    sum = "";
                    continue;
                }
                sum += Series[i];
                if (sum.Length == nDigit)
                {
                    if (Sumator(sum) >= largest)
                    {
                        largest = Sumator(sum);

                        string a = "";
                        for (int j = 0; j < nDigit; j++)
                        {
                            a += (j != (nDigit - 1)) ? sum[j] + "" : sum[j] + " = ";
                        }
                        Console.WriteLine(a + "" + ProductNDigit(sum, nDigit));
                    }
                    sum = sum.Remove(0, 1);

                }
            }
        }
        static string ProductNDigit(string sum, int nDigit)
        {
            string prod = "1";
            int[] number = new int[nDigit];
            string temp = "";
            int ost = 0;
            for (int i = 0; i < sum.Length; i++)
            {
                number[i] = sum.ValueConvert(i);
            }
            for (int i = 0; i < nDigit; i++)
            {
                for (int j = prod.Length - 1; j >= 0; j--)
                {
                    ost += prod.ValueConvert(j) * number[i];

                    temp = ost % 10 + temp;
                    ost /= 10;
                }
                if (ost != 0)
                    temp = ost + temp;
                ost = 0;
                prod = temp;
                temp = "";
            }
            return prod;
        }
        static int Sumator(string bigNumber)
        {
            int sum = 0;
            for (int i = 0; i < bigNumber.Length; i++)
            {
                sum += bigNumber.ValueConvert(i);
            }
            return sum;
        }

        static void LargestProductInASeriesMethodTwo(int nDigit)
        {
            string Series = "73167176531330624919225119674426574742355349194934" +
                           "96983520312774506326239578318016984801869478851843" +
                           "85861560789112949495459501737958331952853208805511" +
                           "12540698747158523863050715693290963295227443043557" +
                           "66896648950445244523161731856403098711121722383113" +
                           "62229893423380308135336276614282806444486645238749" +
                           "30358907296290491560440772390713810515859307960866" +
                           "70172427121883998797908792274921901699720888093776" +
                           "65727333001053367881220235421809751254540594752243" +
                           "52584907711670556013604839586446706324415722155397" +
                           "53697817977846174064955149290862569321978468622482" +
                           "83972241375657056057490261407972968652414535100474" +
                           "82166370484403199890008895243450658541227588666881" +
                           "16427171479924442928230863465674813919123162824586" +
                           "17866458359124566529476545682848912883142607690042" +
                           "24219022671055626321111109370544217506941658960408" +
                           "07198403850962455444362981230987879927244284909188" +
                           "84580156166097919133875499200524063689912560717606" +
                           "05886116467109405077541002256983155200055935729725" +
                           "71636269561882670428252483600823257530420752963450";

            int factors = 0;
            long maxProduct = 0;
            int position = 0;

            long currentProduct = 1;
            while (position < Series.Length)
            {
                int digit = Series.ValueConvert(position);
                if (digit == 0)
                {
                    currentProduct = 1;
                    factors = 0;
                }
                else
                {
                    if (factors < nDigit)
                    {
                        factors++;

                        currentProduct *= digit;
                    }

                    if (factors == nDigit)
                    {
                        if (currentProduct > maxProduct)
                            maxProduct = currentProduct;
                        factors--;
                        currentProduct /= Series.ValueConvert(position - (nDigit - 1));
                    }
                }

                position++;
            }

            Console.WriteLine(maxProduct);
        }
        #endregion

        #region Special Pythagorean triplet
        static void SpecialPythagoreanTriplet()
        {
            int a = 1, b = 1;
            double c = 1.0;
            for (a = 1; a <= 1000; a++)
                for (b = a + 1; b <= 1000; b++)
                    if (a < b)
                    {
                        c = Math.Sqrt(a * a + b * b);
                        if (c % 1 == 0 && a + b + c == 1000)
                        {
                            Console.WriteLine(a + " + " + b + " + " + c + " = " + (a * b * c));
                            a = 1001;
                            b = 1001;
                        }
                    }
        }
        #endregion

        #region Summation of primes
        static void SummationOfPrimes(int max)
        {
            int[] primeNumbers = { 2 };
            int primeNumber = 1;
            long sum = 2;
            bool coffecent;
            while (primeNumbers[primeNumbers.Length - 1] < max/*primeNumber+sum < max*/)
            {
                primeNumber += 2;
                coffecent = true;
                if (primeNumber % 5 == 0 && primeNumber > 10)
                {
                    continue;
                }
                for (int i = 0; i < primeNumbers.Length; i++)
                {
                    if (primeNumber % primeNumbers[i] == 0)
                    {
                        coffecent = false;
                        break;
                    }
                }
                if (coffecent)
                {
                    primeNumbers = IncreaseVector(primeNumbers, primeNumber);
                    if (primeNumber < max)
                        sum += primeNumber;
                }
            }
            Console.WriteLine((primeNumbers.Length - 1) + "  ^  " + sum);//142913828922
        }
        #endregion

        #region Largest product in a grid
        static void LargestProductInAGrid()
        {
            System.Diagnostics.Stopwatch stopwatch = new System.Diagnostics.Stopwatch();
            stopwatch.Start();

            int[] grid = { 08, 02, 22, 97, 38, 15, 00, 40, 00, 75, 04, 05, 07, 78, 52, 12, 50, 77, 91, 08,
                           49, 49, 99, 40, 17, 81, 18, 57, 60, 87, 17, 40, 98, 43, 69, 48, 04, 56, 62, 00,
                           81, 49, 31, 73, 55, 79, 14, 29, 93, 71, 40, 67, 53, 88, 30, 03, 49, 13, 36, 65,
                           52, 70, 95, 23, 04, 60, 11, 42, 69, 24, 68, 56, 01, 32, 56, 71, 37, 02, 36, 91,
                           22, 31, 16, 71, 51, 67, 63, 89, 41, 92, 36, 54, 22, 40, 40, 28, 66, 33, 13, 80,
                           24, 47, 32, 60, 99, 03, 45, 02, 44, 75, 33, 53, 78, 36, 84, 20, 35, 17, 12, 50,
                           32, 98, 81, 28, 64, 23, 67, 10, 26, 38, 40, 67, 59, 54, 70, 66, 18, 38, 64, 70,
                           67, 26, 20, 68, 02, 62, 12, 20, 95, 63, 94, 39, 63, 08, 40, 91, 66, 49, 94, 21,
                           24, 55, 58, 05, 66, 73, 99, 26, 97, 17, 78, 78, 96, 83, 14, 88, 34, 89, 63, 72,
                           21, 36, 23, 09, 75, 00, 76, 44, 20, 45, 35, 14, 00, 61, 33, 97, 34, 31, 33, 95,
                           78, 17, 53, 28, 22, 75, 31, 67, 15, 94, 03, 80, 04, 62, 16, 14, 09, 53, 56, 92,
                           16, 39, 05, 42, 96, 35, 31, 47, 55, 58, 88, 24, 00, 17, 54, 24, 36, 29, 85, 57,
                           86, 56, 00, 48, 35, 71, 89, 07, 05, 44, 44, 37, 44, 60, 21, 58, 51, 54, 17, 58,
                           19, 80, 81, 68, 05, 94, 47, 69, 28, 73, 92, 13, 86, 52, 17, 77, 04, 89, 55, 40,
                           04, 52, 08, 83, 97, 35, 99, 16, 07, 97, 57, 32, 16, 26, 26, 79, 33, 27, 98, 66,
                           88, 36, 68, 87, 57, 62, 20, 72, 03, 46, 33, 67, 46, 55, 12, 32, 63, 93, 53, 69,
                           04, 42, 16, 73, 38, 25, 39, 11, 24, 94, 72, 18, 08, 46, 29, 32, 40, 62, 76, 36,
                           20, 69, 36, 41, 72, 30, 23, 88, 34, 62, 99, 69, 82, 67, 59, 85, 74, 04, 36, 16,
                           20, 73, 35, 29, 78, 31, 90, 01, 74, 31, 49, 71, 48, 86, 81, 16, 23, 57, 05, 54,
                           01, 70, 54, 71, 83, 51, 54, 69, 16, 92, 33, 48, 61, 43, 52, 01, 89, 19, 67, 48};

            int maxProduct = 1;
            int temp = 0;
            for (int i = 0; i < grid.Length; i++)
            {
                if (i <= 396)
                {
                    temp = grid[i] * grid[i + 1] * grid[i + 2] * grid[i + 3];
                    if (temp > maxProduct)
                        maxProduct = temp;
                }

                if (i <= 336)
                {
                    temp = grid[i] * grid[i + 21] * grid[i + 42] * grid[i + 63];
                    if (temp > maxProduct)
                        maxProduct = temp;
                }

                if (i <= 339)
                {
                    temp = grid[i] * grid[i + 20] * grid[i + 40] * grid[i + 60];
                    if (temp > maxProduct)
                        maxProduct = temp;
                }

                if (i % 10 >= 3 && i <= 339)
                {
                    temp = grid[i] * grid[i + 19] * grid[i + 38] * grid[i + 57];
                    if (temp > maxProduct)
                        maxProduct = temp;
                }
            }
            stopwatch.Stop();
            Console.WriteLine("Solution - " + maxProduct);
            Console.WriteLine("Time: " + stopwatch.Elapsed);

        }
        #endregion

        #region Highly divisible triangular number
        static void HighlyDivisibleTriangularNumber()
        {
            ulong factors = 0;
            ulong triangular = 0;
            ulong naturalNumber = 1;
            while (factors < 500)
            {
                factors = 0;
                triangular += naturalNumber++;

                for (ulong i = 1; i <= Math.Sqrt(triangular); i++)
                    if (triangular % i == 0)
                        factors++;

                factors *= 2;
            }
            Console.WriteLine(triangular + "");
        }
        #endregion

        #region Large sum
        static void LargeSum()
        {
            string d = "37107287533902102798797998220837590246510135740250\n" +
             "46376937677490009712648124896970078050417018260538\n" +
             "74324986199524741059474233309513058123726617309629\n" +
             "91942213363574161572522430563301811072406154908250\n" +
             "23067588207539346171171980310421047513778063246676\n" +
             "89261670696623633820136378418383684178734361726757\n" +
             "28112879812849979408065481931592621691275889832738\n" +
             "44274228917432520321923589422876796487670272189318\n" +
             "47451445736001306439091167216856844588711603153276\n" +
             "70386486105843025439939619828917593665686757934951\n" +
             "62176457141856560629502157223196586755079324193331\n" +
             "64906352462741904929101432445813822663347944758178\n" +
             "92575867718337217661963751590579239728245598838407\n" +
             "58203565325359399008402633568948830189458628227828\n" +
             "80181199384826282014278194139940567587151170094390\n" +
             "35398664372827112653829987240784473053190104293586\n" +
             "86515506006295864861532075273371959191420517255829\n" +
             "71693888707715466499115593487603532921714970056938\n" +
             "54370070576826684624621495650076471787294438377604\n" +
             "53282654108756828443191190634694037855217779295145\n" +
             "36123272525000296071075082563815656710885258350721\n" +
             "45876576172410976447339110607218265236877223636045\n" +
             "17423706905851860660448207621209813287860733969412\n" +
             "81142660418086830619328460811191061556940512689692\n" +
             "51934325451728388641918047049293215058642563049483\n" +
             "62467221648435076201727918039944693004732956340691\n" +
             "15732444386908125794514089057706229429197107928209\n" +
             "55037687525678773091862540744969844508330393682126\n" +
             "18336384825330154686196124348767681297534375946515\n" +
             "80386287592878490201521685554828717201219257766954\n" +
             "78182833757993103614740356856449095527097864797581\n" +
             "16726320100436897842553539920931837441497806860984\n" +
             "48403098129077791799088218795327364475675590848030\n" +
             "87086987551392711854517078544161852424320693150332\n" +
             "59959406895756536782107074926966537676326235447210\n" +
             "69793950679652694742597709739166693763042633987085\n" +
             "41052684708299085211399427365734116182760315001271\n" +
             "65378607361501080857009149939512557028198746004375\n" +
             "35829035317434717326932123578154982629742552737307\n" +
             "94953759765105305946966067683156574377167401875275\n" +
             "88902802571733229619176668713819931811048770190271\n" +
             "25267680276078003013678680992525463401061632866526\n" +
             "36270218540497705585629946580636237993140746255962\n" +
             "24074486908231174977792365466257246923322810917141\n" +
             "91430288197103288597806669760892938638285025333403\n" +
             "34413065578016127815921815005561868836468420090470\n" +
             "23053081172816430487623791969842487255036638784583\n" +
             "11487696932154902810424020138335124462181441773470\n" +
             "63783299490636259666498587618221225225512486764533\n" +
             "67720186971698544312419572409913959008952310058822\n" +
             "95548255300263520781532296796249481641953868218774\n" +
             "76085327132285723110424803456124867697064507995236\n" +
             "37774242535411291684276865538926205024910326572967\n" +
             "23701913275725675285653248258265463092207058596522\n" +
             "29798860272258331913126375147341994889534765745501\n" +
             "18495701454879288984856827726077713721403798879715\n" +
             "38298203783031473527721580348144513491373226651381\n" +
             "34829543829199918180278916522431027392251122869539\n" +
             "40957953066405232632538044100059654939159879593635\n" +
             "29746152185502371307642255121183693803580388584903\n" +
             "41698116222072977186158236678424689157993532961922\n" +
             "62467957194401269043877107275048102390895523597457\n" +
             "23189706772547915061505504953922979530901129967519\n" +
             "86188088225875314529584099251203829009407770775672\n" +
             "11306739708304724483816533873502340845647058077308\n" +
             "82959174767140363198008187129011875491310547126581\n" +
             "97623331044818386269515456334926366572897563400500\n" +
             "42846280183517070527831839425882145521227251250327\n" +
             "55121603546981200581762165212827652751691296897789\n" +
             "32238195734329339946437501907836945765883352399886\n" +
             "75506164965184775180738168837861091527357929701337\n" +
             "62177842752192623401942399639168044983993173312731\n" +
             "32924185707147349566916674687634660915035914677504\n" +
             "99518671430235219628894890102423325116913619626622\n" +
             "73267460800591547471830798392868535206946944540724\n" +
             "76841822524674417161514036427982273348055556214818\n" +
             "97142617910342598647204516893989422179826088076852\n" +
             "87783646182799346313767754307809363333018982642090\n" +
             "10848802521674670883215120185883543223812876952786\n" +
             "71329612474782464538636993009049310363619763878039\n" +
             "62184073572399794223406235393808339651327408011116\n" +
             "66627891981488087797941876876144230030984490851411\n" +
             "60661826293682836764744779239180335110989069790714\n" +
             "85786944089552990653640447425576083659976645795096\n" +
             "66024396409905389607120198219976047599490197230297\n" +
             "64913982680032973156037120041377903785566085089252\n" +
             "16730939319872750275468906903707539413042652315011\n" +
             "94809377245048795150954100921645863754710598436791\n" +
             "78639167021187492431995700641917969777599028300699\n" +
             "15368713711936614952811305876380278410754449733078\n" +
             "40789923115535562561142322423255033685442488917353\n" +
             "44889911501440648020369068063960672322193204149535\n" +
             "41503128880339536053299340368006977710650566631954\n" +
             "81234880673210146739058568557934581403627822703280\n" +
             "82616570773948327592232845941706525094512325230608\n" +
             "22918802058777319719839450180888072429661980811197\n" +
             "77158542502016545090413245809786882778948721859617\n" +
             "72107838435069186155435662884062257473692284509516\n" +
             "20849603980134001723930671666823555245252804609722\n" +
             "53503534226472524250874054075591789781264330331690";
            string[] numbers = d.Split('\n');
            int temp=0;
            string sum = "";
            for (int j = 49; j >= 0; j--)
            {
                for (int i = 0; i < numbers.Length; i++)
                {
                    temp += numbers[i].ValueConvert(j);
                }
                sum = temp % 10 + sum;
                temp /= 10;
            }
            sum = temp + sum;
            Console.WriteLine(sum);
        }
        #endregion

        #region Longest Collatz sequence
        static void LongestCollatzSequence()
        {
            System.Diagnostics.Stopwatch stopwatch = new System.Diagnostics.Stopwatch();
            stopwatch.Start();

            long[] longSeq = new long[1000000];
            long maxSequence = 0;
            long max = 0;
            for (long i = 2; i < 1000000; i++)
            {
                long sequence = 1;
                long current = i;
                while (current != 1)
                {
                    if (current % 2 == 0)
                        current /= 2;
                    else
                        current = current * 3 + 1;
                    
                    if (current < longSeq.Length && longSeq[current] != 0)
                    {
                        sequence += longSeq[current];
                        break;
                    }
                    sequence++;
                }
                longSeq[i] = sequence;
                if (sequence > maxSequence)
                {
                    maxSequence = sequence;
                    max = i;
                }
            }
            Console.WriteLine(" Starting number produces the longest chain: " + max + ". Long chain: " + maxSequence);
            stopwatch.Stop();
            Console.WriteLine("Time: " + stopwatch.Elapsed);
        }
        #endregion

        #region Lattice paths
        static ulong LatticePaths(int sideLenght)
        {
            int[] factorial = new int[sideLenght];
            for (int i = 0; i < sideLenght;i++)
                factorial[i] = sideLenght*2 - i;
            int device = sideLenght;
            for (int i = 0; device > 0; i++)
            {
                if(device == 10)
                {
                    break;
                }
                if (factorial[i] % device == 0)
                {
                    factorial[i] /= device;
                    i = 0;
                    device--;
                }
            }
            ulong otvet = 1;
            for (int i = 0; i < sideLenght; i++)
                otvet *= (ulong)factorial[i];
            return otvet / mult(10);
        }
        static ulong mult(ulong x)
        {
            ulong a = 1;
            for (ulong i = 2; i <= x; i++)
                a *= i;
            return a;
        }
        #endregion

        #region
        #endregion

        #region
        #endregion

        #region
        #endregion
    }
    public static class StringExtensions
    {
        public static int ValueConvert(this string x, int position)
        {
            return int.Parse(x[position].ToString());
        }
    }
}
