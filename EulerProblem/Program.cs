using System;
using System.Text;
using System.Collections.Generic;
using System.IO;
using System.Numerics;
using System.Linq;

namespace EulerProblem
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("Multiples of 3 or 5");
            Console.WriteLine("\n If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9.The sum of these multiples is 23.");
            Console.WriteLine("Find the sum of all the multiples of 3 or 5 below 1000.");
            //Multiples(new int[] { 3, 5 }, 1000);


            Console.WriteLine("Even Fibonacci numbers");
            Console.WriteLine("Each new term in the Fibonacci sequence is generated by adding the previous two terms.By starting with 1 and 2, the first 10 terms will be:");
            Console.WriteLine(" 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...");
            Console.WriteLine("By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.");
            //FibonacciMethodOne(4000000);


            Console.WriteLine("Largest prime factor");
            Console.WriteLine("The prime factors of 13195 are 5, 7, 13 and 29.");
            Console.WriteLine("What is the largest prime factor of the number 600851475143 ?");
            //PrimeFactor(600851475143);


            Console.WriteLine("A palindromic number reads the same both ways. The largest palindrome made from the product of two 2 - digit numbers is 9009 = 91 * 99.");
            Console.WriteLine("Find the largest palindrome made from the product of two 3 - digit numbers.");
            //Palindrome(999);


            Console.WriteLine("2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.");
            Console.WriteLine("What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20 ?");
            //SmallestMultiple(11, 20);


            Console.WriteLine("The sum of the squares of the first ten natural numbers is,");
            Console.WriteLine("1^2+2^2+...+10^2=385");
            Console.WriteLine("The square of the sum of the first ten natural numbers is,");
            Console.WriteLine("(1+2+...+10)^2=3025");
            Console.WriteLine("Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is");
            Console.WriteLine("3025-385=2640.");
            Console.WriteLine("Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.");
            //SumSquareDifference(100);


            Console.WriteLine("By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.");
            Console.WriteLine("What is the 10 001st prime number ?");
            //Prime10001st();


            Console.WriteLine("The four adjacent digits in the 1000 - digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.");
            Console.WriteLine("73167176531330624919225119674426574742355349194934");
            Console.WriteLine("96983520312774506326239578318016984801869478851843");
            Console.WriteLine("85861560789112949495459501737958331952853208805511");
            Console.WriteLine("12540698747158523863050715693290963295227443043557");
            Console.WriteLine("66896648950445244523161731856403098711121722383113");
            Console.WriteLine("62229893423380308135336276614282806444486645238749");
            Console.WriteLine("30358907296290491560440772390713810515859307960866");
            Console.WriteLine("70172427121883998797908792274921901699720888093776");
            Console.WriteLine("65727333001053367881220235421809751254540594752243");
            Console.WriteLine("52584907711670556013604839586446706324415722155397");
            Console.WriteLine("53697817977846174064955149290862569321978468622482");
            Console.WriteLine("83972241375657056057490261407972968652414535100474");
            Console.WriteLine("82166370484403199890008895243450658541227588666881");
            Console.WriteLine("16427171479924442928230863465674813919123162824586");
            Console.WriteLine("17866458359124566529476545682848912883142607690042");
            Console.WriteLine("24219022671055626321111109370544217506941658960408");
            Console.WriteLine("07198403850962455444362981230987879927244284909188");
            Console.WriteLine("84580156166097919133875499200524063689912560717606");
            Console.WriteLine("05886116467109405077541002256983155200055935729725");
            Console.WriteLine("71636269561882670428252483600823257530420752963450");
            Console.WriteLine("Find the thirteen adjacent digits in the 1000 - digit number that have the greatest product. What is the value of this product ?");
            //LargestProductInASeriesMethodOne(13);
            //LargestProductInASeriesMethodTwo(13);


            Console.WriteLine("A Pythagorean triplet is a set of three natural numbers, a < b < c, for which,");
            Console.WriteLine("a^2 + b^2 = c^2");
            Console.WriteLine("For example, 3^2 + 4^2 = 9 + 16 = 25 = 5^2.");
            Console.WriteLine("There exists exactly one Pythagorean triplet for which a + b + c = 1000.");
            Console.WriteLine("Find the product abc.");
            //SpecialPythagoreanTriplet();


            Console.WriteLine("The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.");
            Console.WriteLine("Find the sum of all the primes below two million.");
            //SummationOfPrimes(2000000);


            Console.WriteLine("In the 20×20 grid below, four numbers along a diagonal line have been marked in red.");
            Console.WriteLine("08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08");
            Console.WriteLine("49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00");
            Console.WriteLine("81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65");
            Console.WriteLine("52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91");
            Console.WriteLine("22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80");
            Console.WriteLine("24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50");
            Console.Write("32 98 81 28 64 23 67 10 "); Console.ForegroundColor = ConsoleColor.Red; Console.Write("26"); Console.ResetColor(); Console.WriteLine(" 38 40 67 59 54 70 66 18 38 64 70");
            Console.Write("67 26 20 68 02 62 12 20 95 "); Console.ForegroundColor = ConsoleColor.Red; Console.Write("63"); Console.ResetColor(); Console.WriteLine(" 94 39 63 08 40 91 66 49 94 21");
            Console.Write("24 55 58 05 66 73 99 26 97 17 "); Console.ForegroundColor = ConsoleColor.Red; Console.Write("78"); Console.ResetColor(); Console.WriteLine(" 78 96 83 14 88 34 89 63 72");
            Console.Write("21 36 23 09 75 00 76 44 20 45 35 "); Console.ForegroundColor = ConsoleColor.Red; Console.Write("14"); Console.ResetColor(); Console.WriteLine(" 00 61 33 97 34 31 33 95");
            Console.WriteLine("78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92");
            Console.WriteLine("16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57");
            Console.WriteLine("86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58");
            Console.WriteLine("19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40");
            Console.WriteLine("04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66");
            Console.WriteLine("88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69");
            Console.WriteLine("04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36");
            Console.WriteLine("20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16");
            Console.WriteLine("20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54");
            Console.WriteLine("01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48");
            Console.WriteLine("The product of these numbers is 26 × 63 × 78 × 14 = 1788696.");
            Console.WriteLine("What is the greatest product of four adjacent numbers in the same direction(up, down, left, right, or diagonally) in the 20x20 grid ?");
            //LargestProductInAGrid();


            Console.WriteLine("The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.The first ten terms would be:");
            Console.WriteLine("                                  1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...");
            Console.WriteLine("Let us list the factors of the first seven triangle numbers:");
            Console.WriteLine("     1: 1");
            Console.WriteLine("     3: 1,3");
            Console.WriteLine("     6: 1,2,3,6");
            Console.WriteLine("     10: 1,2,5,10");
            Console.WriteLine("     15: 1,3,5,15");
            Console.WriteLine("     21: 1,3,7,21");
            Console.WriteLine("     28: 1,2,4,7,14,28");
            Console.WriteLine("We can see that 28 is the first triangle number to have over five divisors.");
            Console.WriteLine("What is the value of the first triangle number to have over five hundred divisors ?");
            //HighlyDivisibleTriangularNumber();


            Console.WriteLine("Work out the first ten digits of the sum of the following one - hundred 50 - digit numbers.");
            #region Big numbers
            Console.WriteLine("37107287533902102798797998220837590246510135740250\n" +
             "46376937677490009712648124896970078050417018260538\n" +
             "74324986199524741059474233309513058123726617309629\n" +
             "91942213363574161572522430563301811072406154908250\n" +
             "23067588207539346171171980310421047513778063246676\n" +
             "89261670696623633820136378418383684178734361726757\n" +
             "28112879812849979408065481931592621691275889832738\n" +
             "44274228917432520321923589422876796487670272189318\n" +
             "47451445736001306439091167216856844588711603153276\n" +
             "70386486105843025439939619828917593665686757934951\n" +
             "62176457141856560629502157223196586755079324193331\n" +
             "64906352462741904929101432445813822663347944758178\n" +
             "92575867718337217661963751590579239728245598838407\n" +
             "58203565325359399008402633568948830189458628227828\n" +
             "80181199384826282014278194139940567587151170094390\n" +
             "35398664372827112653829987240784473053190104293586\n" +
             "86515506006295864861532075273371959191420517255829\n" +
             "71693888707715466499115593487603532921714970056938\n" +
             "54370070576826684624621495650076471787294438377604\n" +
             "53282654108756828443191190634694037855217779295145\n" +
             "36123272525000296071075082563815656710885258350721\n" +
             "45876576172410976447339110607218265236877223636045\n" +
             "17423706905851860660448207621209813287860733969412\n" +
             "81142660418086830619328460811191061556940512689692\n" +
             "51934325451728388641918047049293215058642563049483\n" +
             "62467221648435076201727918039944693004732956340691\n" +
             "15732444386908125794514089057706229429197107928209\n" +
             "55037687525678773091862540744969844508330393682126\n" +
             "18336384825330154686196124348767681297534375946515\n" +
             "80386287592878490201521685554828717201219257766954\n" +
             "78182833757993103614740356856449095527097864797581\n" +
             "16726320100436897842553539920931837441497806860984\n" +
             "48403098129077791799088218795327364475675590848030\n" +
             "87086987551392711854517078544161852424320693150332\n" +
             "59959406895756536782107074926966537676326235447210\n" +
             "69793950679652694742597709739166693763042633987085\n" +
             "41052684708299085211399427365734116182760315001271\n" +
             "65378607361501080857009149939512557028198746004375\n" +
             "35829035317434717326932123578154982629742552737307\n" +
             "94953759765105305946966067683156574377167401875275\n" +
             "88902802571733229619176668713819931811048770190271\n" +
             "25267680276078003013678680992525463401061632866526\n" +
             "36270218540497705585629946580636237993140746255962\n" +
             "24074486908231174977792365466257246923322810917141\n" +
             "91430288197103288597806669760892938638285025333403\n" +
             "34413065578016127815921815005561868836468420090470\n" +
             "23053081172816430487623791969842487255036638784583\n" +
             "11487696932154902810424020138335124462181441773470\n" +
             "63783299490636259666498587618221225225512486764533\n" +
             "67720186971698544312419572409913959008952310058822\n" +
             "95548255300263520781532296796249481641953868218774\n" +
             "76085327132285723110424803456124867697064507995236\n" +
             "37774242535411291684276865538926205024910326572967\n" +
             "23701913275725675285653248258265463092207058596522\n" +
             "29798860272258331913126375147341994889534765745501\n" +
             "18495701454879288984856827726077713721403798879715\n" +
             "38298203783031473527721580348144513491373226651381\n" +
             "34829543829199918180278916522431027392251122869539\n" +
             "40957953066405232632538044100059654939159879593635\n" +
             "29746152185502371307642255121183693803580388584903\n" +
             "41698116222072977186158236678424689157993532961922\n" +
             "62467957194401269043877107275048102390895523597457\n" +
             "23189706772547915061505504953922979530901129967519\n" +
             "86188088225875314529584099251203829009407770775672\n" +
             "11306739708304724483816533873502340845647058077308\n" +
             "82959174767140363198008187129011875491310547126581\n" +
             "97623331044818386269515456334926366572897563400500\n" +
             "42846280183517070527831839425882145521227251250327\n" +
             "55121603546981200581762165212827652751691296897789\n" +
             "32238195734329339946437501907836945765883352399886\n" +
             "75506164965184775180738168837861091527357929701337\n" +
             "62177842752192623401942399639168044983993173312731\n" +
             "32924185707147349566916674687634660915035914677504\n" +
             "99518671430235219628894890102423325116913619626622\n" +
             "73267460800591547471830798392868535206946944540724\n" +
             "76841822524674417161514036427982273348055556214818\n" +
             "97142617910342598647204516893989422179826088076852\n" +
             "87783646182799346313767754307809363333018982642090\n" +
             "10848802521674670883215120185883543223812876952786\n" +
             "71329612474782464538636993009049310363619763878039\n" +
             "62184073572399794223406235393808339651327408011116\n" +
             "66627891981488087797941876876144230030984490851411\n" +
             "60661826293682836764744779239180335110989069790714\n" +
             "85786944089552990653640447425576083659976645795096\n" +
             "66024396409905389607120198219976047599490197230297\n" +
             "64913982680032973156037120041377903785566085089252\n" +
             "16730939319872750275468906903707539413042652315011\n" +
             "94809377245048795150954100921645863754710598436791\n" +
             "78639167021187492431995700641917969777599028300699\n" +
             "15368713711936614952811305876380278410754449733078\n" +
             "40789923115535562561142322423255033685442488917353\n" +
             "44889911501440648020369068063960672322193204149535\n" +
             "41503128880339536053299340368006977710650566631954\n" +
             "81234880673210146739058568557934581403627822703280\n" +
             "82616570773948327592232845941706525094512325230608\n" +
             "22918802058777319719839450180888072429661980811197\n" +
             "77158542502016545090413245809786882778948721859617\n" +
             "72107838435069186155435662884062257473692284509516\n" +
             "20849603980134001723930671666823555245252804609722\n" +
             "53503534226472524250874054075591789781264330331690\n");
            #endregion
            //LargeSum();


            Console.WriteLine("The following iterative sequence is defined for the set of positive integers:");
            Console.WriteLine("            n → n / 2(n is even)");
            Console.WriteLine("            n → 3n + 1(n is odd)");
            Console.WriteLine("Using the rule above and starting with 13, we generate the following sequence:");
            Console.WriteLine("            13 → 40 → 20 → 10 → 5 → 16 → 8 → 4 → 2 → 1");
            Console.WriteLine("It can be seen that this sequence(starting at 13 and finishing at 1) contains 10 terms.Although it has not been proved yet(Collatz Problem), it is thought that all starting numbers finish at 1.");
            Console.WriteLine("Which starting number, under one million, produces the longest chain ?");
            Console.WriteLine("NOTE : Once the chain starts the terms are allowed to go above one million.");
            //LongestCollatzSequence();


            Console.WriteLine("Starting in the top left corner of a 2×2 grid, and only being able to move to the right and down, there are exactly 6 routes to the bottom right corner.");
            Console.WriteLine("How many such routes are there through a 20x20 grid ?");
            //Console.WriteLine("Solution: " + (LatticePaths(20)));


            Console.WriteLine("2^15 = 32768 and the sum of its digits is 3 + 2 + 7 + 6 + 8 = 26.");
            Console.WriteLine("What is the sum of the digits of the number 2^1000 ?");
            //PowerDigitSumMethodOne(1000);
            //PowerDigitSumMethodTwo(1000);


            Console.WriteLine("If the numbers 1 to 5 are written out in words: one, two, three, four, five, then there are 3 + 3 + 5 + 4 + 4 = 19 letters used in total.");
            Console.WriteLine("If all the numbers from 1 to 1000(one thousand) inclusive were written out in words, how many letters would be used?");
            Console.WriteLine("NOTE: Do not count spaces or hyphens. For example, 342(three hundred and forty - two) contains 23 letters and 115(one hundred and fifteen) contains 20 letters.The use of 'and' when writing out numbers is in compliance with British usage.");
            //NumberLetterCounts();


            Console.WriteLine("By starting at the top of the triangle below and moving to adjacent numbers on the row below, the maximum total from top to bottom is 23.");
            Console.ForegroundColor = ConsoleColor.Red; Console.WriteLine("        3");
            Console.Write("       "); Console.Write("7"); Console.ResetColor(); Console.WriteLine(" 4");
            Console.Write("      2 "); Console.ForegroundColor = ConsoleColor.Red; Console.Write("4"); Console.ResetColor(); Console.WriteLine(" 6");
            Console.Write("     8 5 "); Console.ForegroundColor = ConsoleColor.Red; Console.Write("9"); Console.ResetColor(); Console.WriteLine(" 3");
            Console.WriteLine("That is, 3 + 7 + 4 + 9 = 23.");
            Console.WriteLine("Find the maximum total from top to bottom of the triangle below:");
            Console.WriteLine("                   75");
            Console.WriteLine("                  95 64");
            Console.WriteLine("                 17 47 82");
            Console.WriteLine("                18 35 87 10");
            Console.WriteLine("               20 04 82 47 65");
            Console.WriteLine("              19 01 23 75 03 34");
            Console.WriteLine("             88 02 77 73 07 63 67");
            Console.WriteLine("            99 65 04 28 06 16 70 92");
            Console.WriteLine("           41 41 26 56 83 40 80 70 33");
            Console.WriteLine("          41 48 72 33 47 32 37 16 94 29");
            Console.WriteLine("         53 71 44 65 25 43 91 52 97 51 14");
            Console.WriteLine("        70 11 33 28 77 73 17 78 39 68 17 57");
            Console.WriteLine("       91 71 52 38 17 14 91 43 58 50 27 29 48");
            Console.WriteLine("      63 66 04 68 89 53 67 30 73 16 69 87 40 31");
            Console.WriteLine("     04 62 98 27 23 09 70 98 73 93 38 53 60 04 23");
            Console.WriteLine("NOTE: As there are only 16384 routes, it is possible to solve this problem by trying every route.However, Problem 67, is the same challenge with a triangle containing one-hundred rows; it cannot be solved by brute force, and requires a clever method!; o)");
            //MaximumPathSumI();
            //MaximumPathSumII();


            Console.WriteLine("You are given the following information, but you may prefer to do some research for yourself.");
            Console.WriteLine("* 1 Jan 1900 was a Monday.");
            Console.WriteLine("* Thirty days has September,");
            Console.WriteLine("April, June and November.");
            Console.WriteLine("* All the rest have thirty - one,");
            Console.WriteLine("Saving February alone,");
            Console.WriteLine("Which has twenty - eight, rain or shine.");
            Console.WriteLine("And on leap years, twenty - nine.");
            Console.WriteLine("* A leap year occurs on any year evenly divisible by 4, but not on a century unless it is divisible by 400.");
            Console.WriteLine("How many Sundays fell on the first of the month during the twentieth century(1 Jan 1901 to 31 Dec 2000) ?");
            CountingSundays();


            Console.WriteLine("n! means n × (n − 1) × ... × 3 × 2 × 1");
            Console.WriteLine("For example, 10! = 10 × 9 × ... × 3 × 2 × 1 = 3628800,");
            Console.WriteLine("and the sum of the digits in the number 10! is 3 + 6 + 2 + 8 + 8 + 0 + 0 = 27.");
            Console.WriteLine("Find the sum of the digits in the number 100!");
            FactorialDigitSum(100);


            Console.WriteLine("Let d(n) be defined as the sum of proper divisors of n(numbers less than n which divide evenly into n).");
            Console.WriteLine("If d(a) = b and d(b) = a, where a ≠ b, then a and b are an amicable pair and each of a and b are called amicable numbers.");
            Console.WriteLine("For example, the proper divisors of 220 are 1, 2, 4, 5, 10, 11, 20, 22, 44, 55 and 110; therefore d(220) = 284.The proper divisors of 284 are 1, 2, 4, 71 and 142; so d(284) = 220.");
            Console.WriteLine("Evaluate the sum of all the amicable numbers under 10000.");
            AmicableNumbers();


            Console.WriteLine("Using names.txt(right click and 'Save Link/Target As...'), a 46K text file containing over five-thousand first names, begin by sorting it into alphabetical order. Then working out the alphabetical value for each name, multiply this value by its alphabetical position in the list to obtain a name score.");



            Console.WriteLine("For example, when the list is sorted into alphabetical order, COLIN, which is worth 3 + 15 + 12 + 9 + 14 = 53, is the 938th name in the list.So, COLIN would obtain a score of 938 × 53 = 49714.");

            Console.WriteLine("What is the total of all the name scores in the file ?");
            NamesScores();

        }
        #region Multiples
        static void Multiples(int[] numberMultiples, int maxNumber)
        {
            //sort vector numberMultiples
            int max = maxNumber;
            int sum = 0;
            for (int i = 0; i < numberMultiples.Length; i++)
            {
                Console.WriteLine("natural numbers are multiples of " + numberMultiples[i]);
                while (max > 1)
                {
                    if (max % numberMultiples[i] == 0)
                    {
                        Console.Write(max + " ");
                        sum += max;
                    }
                    max--;

                }
                max = maxNumber;
                Console.WriteLine("");
            }
            Console.WriteLine("sum of all the multiples of 3 or 5 below 1000 = " + sum);
        }
        #endregion

        #region Fibonacci
        static void FibonacciMethodOne(int maxValues)
        {
            int valueFirst, valueSecond;
            int sum = 0;
            valueFirst = valueSecond = 1;
            do
            {
                Console.Write(valueFirst + " ");
                if (valueFirst % 2 == 0)
                    sum += valueFirst;
                valueFirst += valueSecond;
                valueSecond = valueFirst - valueSecond;
            } while (valueFirst < maxValues);
            Console.WriteLine("");
            Console.WriteLine("the sum of the even-valued terms = " + sum);

        }
        #endregion

        #region PrimeFactor
        static void PrimeFactor(long number)
        {
            int[] primeNumbers = { 2 };
            bool coffecent;
            int primeNumber = 1;
            int max = 1;
            long multipler = (long)Math.Sqrt(number);
            while (multipler > primeNumber)
            {
                primeNumber += 2;
                coffecent = true;
                if (primeNumber % 5 == 0 && primeNumber > 10)
                {
                    continue;
                }
                for (int i = 0; i < primeNumbers.Length; i++)
                {
                    if (primeNumber % primeNumbers[i] == 0)
                    {
                        coffecent = false;
                        break;
                    }
                }
                if (coffecent)
                {
                    primeNumbers = IncreaseVector(primeNumbers, primeNumber);
                    if (number % primeNumber == 0)
                    {
                        max = primeNumber;
                        Console.Write(primeNumber + " ");
                    }
                }
            }
            Console.WriteLine();
            Console.WriteLine(max);
        }

        static int[] IncreaseVector(int[] vector, int newValue)
        {
            int[] newVector = new int[vector.Length + 1];
            for (int i = 0; i < vector.Length; i++)
            {
                newVector[i] = vector[i];
            }
            newVector[vector.Length] = newValue;
            return newVector;

        }
        #endregion

        #region Palindrome
        static void Palindrome(int max)
        {
            string number, firstHalf = "", secondHalf = "";
            int largest = 0;
            for (int i = 11; i <= max; i++)
            {
                for (int j = 11; j <= max; j++)
                {
                    number = (i * j).ToString();
                    for (int k = 0; k < number.Length / 2; k++)
                    {
                        firstHalf += number[k];
                        secondHalf += number[number.Length - 1 - k];
                    }
                    if (firstHalf == secondHalf && largest < i * j)
                        //Console.WriteLine(number + " = " + i + " * " + j);
                        largest = i * j;
                    firstHalf = "";
                    secondHalf = "";
                }
            }
            Console.WriteLine(largest);
        }
        #endregion

        #region SmallestMultiple
        static void SmallestMultiple(int min, int max)
        {
            int multiple = max * (max - 1);
            bool otvet = false;
            do
            {
                otvet = false;
                multiple += max;
                for (int i = max - 1; i >= min; i--)
                {
                    if (multiple % i != 0)
                    {
                        otvet = true;
                        break;
                    }
                }
            } while (otvet);
            Console.WriteLine(multiple);
        }
        #endregion

        #region SumSquareDifference
        static void SumSquareDifference(int nutNumbers)
        {
            int squareSum = 0;
            int sumSquare = 0;
            for (int i = 1; i <= nutNumbers; i++)
            {
                sumSquare += i * i;
                squareSum += i;
            }
            squareSum = squareSum * squareSum;
            Console.WriteLine("Difference: " + (squareSum - sumSquare));
        }
        #endregion

        #region 10001st prime
        static void Prime10001st()
        {
            int[] primeNumbers = { 2 };
            int primeNumber = 1;

            bool coffecent;
            while (primeNumbers.Length < 10001)
            {
                primeNumber += 2;
                coffecent = true;
                if (primeNumber % 5 == 0 && primeNumber > 10)
                {
                    continue;
                }
                for (int i = 0; i < primeNumbers.Length; i++)
                {
                    if (primeNumber % primeNumbers[i] == 0)
                    {
                        coffecent = false;
                        break;
                    }
                }
                if (coffecent)
                {
                    primeNumbers = IncreaseVector(primeNumbers, primeNumber);
                }
            }
            Console.WriteLine(primeNumbers[primeNumbers.Length - 1]);
        }
        #endregion

        #region Largest product in a series
        static void LargestProductInASeriesMethodOne(int nDigit)
        {
            string Series = "73167176531330624919225119674426574742355349194934" +
                            "96983520312774506326239578318016984801869478851843" +
                            "85861560789112949495459501737958331952853208805511" +
                            "12540698747158523863050715693290963295227443043557" +
                            "66896648950445244523161731856403098711121722383113" +
                            "62229893423380308135336276614282806444486645238749" +
                            "30358907296290491560440772390713810515859307960866" +
                            "70172427121883998797908792274921901699720888093776" +
                            "65727333001053367881220235421809751254540594752243" +
                            "52584907711670556013604839586446706324415722155397" +
                            "53697817977846174064955149290862569321978468622482" +
                            "83972241375657056057490261407972968652414535100474" +
                            "82166370484403199890008895243450658541227588666881" +
                            "16427171479924442928230863465674813919123162824586" +
                            "17866458359124566529476545682848912883142607690042" +
                            "24219022671055626321111109370544217506941658960408" +
                            "07198403850962455444362981230987879927244284909188" +
                            "84580156166097919133875499200524063689912560717606" +
                            "05886116467109405077541002256983155200055935729725" +
                            "71636269561882670428252483600823257530420752963450";
            string sum = "";
            int largest = 0;
            for (int i = 0; i < 1000; i++)
            {
                if (Series[i] == '0')
                {
                    sum = "";
                    continue;
                }
                sum += Series[i];
                if (sum.Length == nDigit)
                {
                    if (Sumator(sum) >= largest)
                    {
                        largest = Sumator(sum);

                        string a = "";
                        for (int j = 0; j < nDigit; j++)
                        {
                            a += (j != (nDigit - 1)) ? sum[j] + "" : sum[j] + " = ";
                        }
                        Console.WriteLine(a + "" + ProductNDigit(sum, nDigit));
                    }
                    sum = sum.Remove(0, 1);

                }
            }
        }
        static string ProductNDigit(string sum, int nDigit)
        {
            string prod = "1";
            int[] number = new int[nDigit];
            string temp = "";
            int ost = 0;
            for (int i = 0; i < sum.Length; i++)
            {
                number[i] = sum.ValueConvert(i);
            }
            for (int i = 0; i < nDigit; i++)
            {
                for (int j = prod.Length - 1; j >= 0; j--)
                {
                    ost += prod.ValueConvert(j) * number[i];

                    temp = ost % 10 + temp;
                    ost /= 10;
                }
                if (ost != 0)
                    temp = ost + temp;
                ost = 0;
                prod = temp;
                temp = "";
            }
            return prod;
        }
        static int Sumator(string bigNumber)
        {
            int sum = 0;
            for (int i = 0; i < bigNumber.Length; i++)
            {
                sum += bigNumber.ValueConvert(i);
            }
            return sum;
        }

        static void LargestProductInASeriesMethodTwo(int nDigit)
        {
            string Series = "73167176531330624919225119674426574742355349194934" +
                           "96983520312774506326239578318016984801869478851843" +
                           "85861560789112949495459501737958331952853208805511" +
                           "12540698747158523863050715693290963295227443043557" +
                           "66896648950445244523161731856403098711121722383113" +
                           "62229893423380308135336276614282806444486645238749" +
                           "30358907296290491560440772390713810515859307960866" +
                           "70172427121883998797908792274921901699720888093776" +
                           "65727333001053367881220235421809751254540594752243" +
                           "52584907711670556013604839586446706324415722155397" +
                           "53697817977846174064955149290862569321978468622482" +
                           "83972241375657056057490261407972968652414535100474" +
                           "82166370484403199890008895243450658541227588666881" +
                           "16427171479924442928230863465674813919123162824586" +
                           "17866458359124566529476545682848912883142607690042" +
                           "24219022671055626321111109370544217506941658960408" +
                           "07198403850962455444362981230987879927244284909188" +
                           "84580156166097919133875499200524063689912560717606" +
                           "05886116467109405077541002256983155200055935729725" +
                           "71636269561882670428252483600823257530420752963450";

            int factors = 0;
            long maxProduct = 0;
            int position = 0;

            long currentProduct = 1;
            while (position < Series.Length)
            {
                int digit = Series.ValueConvert(position);
                if (digit == 0)
                {
                    currentProduct = 1;
                    factors = 0;
                }
                else
                {
                    if (factors < nDigit)
                    {
                        factors++;

                        currentProduct *= digit;
                    }

                    if (factors == nDigit)
                    {
                        if (currentProduct > maxProduct)
                            maxProduct = currentProduct;
                        factors--;
                        currentProduct /= Series.ValueConvert(position - (nDigit - 1));
                    }
                }

                position++;
            }

            Console.WriteLine(maxProduct);
        }
        #endregion

        #region Special Pythagorean triplet
        static void SpecialPythagoreanTriplet()
        {
            int a = 1, b = 1;
            double c = 1.0;
            for (a = 1; a <= 1000; a++)
                for (b = a + 1; b <= 1000; b++)
                    if (a < b)
                    {
                        c = Math.Sqrt(a * a + b * b);
                        if (c % 1 == 0 && a + b + c == 1000)
                        {
                            Console.WriteLine(a + " + " + b + " + " + c + " = " + (a * b * c));
                            a = 1001;
                            b = 1001;
                        }
                    }
        }
        #endregion

        #region Summation of primes
        static void SummationOfPrimes(int max)
        {
            int[] primeNumbers = { 2 };
            int primeNumber = 1;
            long sum = 2;
            bool coffecent;
            while (primeNumbers[primeNumbers.Length - 1] < max/*primeNumber+sum < max*/)
            {
                primeNumber += 2;
                coffecent = true;
                if (primeNumber % 5 == 0 && primeNumber > 10)
                {
                    continue;
                }
                for (int i = 0; i < primeNumbers.Length; i++)
                {
                    if (primeNumber % primeNumbers[i] == 0)
                    {
                        coffecent = false;
                        break;
                    }
                }
                if (coffecent)
                {
                    primeNumbers = IncreaseVector(primeNumbers, primeNumber);
                    if (primeNumber < max)
                        sum += primeNumber;
                }
            }
            Console.WriteLine((primeNumbers.Length - 1) + "  ^  " + sum);//142913828922
        }
        #endregion

        #region Largest product in a grid
        static void LargestProductInAGrid()
        {
            System.Diagnostics.Stopwatch stopwatch = new System.Diagnostics.Stopwatch();
            stopwatch.Start();

            int[] grid = { 08, 02, 22, 97, 38, 15, 00, 40, 00, 75, 04, 05, 07, 78, 52, 12, 50, 77, 91, 08,
                           49, 49, 99, 40, 17, 81, 18, 57, 60, 87, 17, 40, 98, 43, 69, 48, 04, 56, 62, 00,
                           81, 49, 31, 73, 55, 79, 14, 29, 93, 71, 40, 67, 53, 88, 30, 03, 49, 13, 36, 65,
                           52, 70, 95, 23, 04, 60, 11, 42, 69, 24, 68, 56, 01, 32, 56, 71, 37, 02, 36, 91,
                           22, 31, 16, 71, 51, 67, 63, 89, 41, 92, 36, 54, 22, 40, 40, 28, 66, 33, 13, 80,
                           24, 47, 32, 60, 99, 03, 45, 02, 44, 75, 33, 53, 78, 36, 84, 20, 35, 17, 12, 50,
                           32, 98, 81, 28, 64, 23, 67, 10, 26, 38, 40, 67, 59, 54, 70, 66, 18, 38, 64, 70,
                           67, 26, 20, 68, 02, 62, 12, 20, 95, 63, 94, 39, 63, 08, 40, 91, 66, 49, 94, 21,
                           24, 55, 58, 05, 66, 73, 99, 26, 97, 17, 78, 78, 96, 83, 14, 88, 34, 89, 63, 72,
                           21, 36, 23, 09, 75, 00, 76, 44, 20, 45, 35, 14, 00, 61, 33, 97, 34, 31, 33, 95,
                           78, 17, 53, 28, 22, 75, 31, 67, 15, 94, 03, 80, 04, 62, 16, 14, 09, 53, 56, 92,
                           16, 39, 05, 42, 96, 35, 31, 47, 55, 58, 88, 24, 00, 17, 54, 24, 36, 29, 85, 57,
                           86, 56, 00, 48, 35, 71, 89, 07, 05, 44, 44, 37, 44, 60, 21, 58, 51, 54, 17, 58,
                           19, 80, 81, 68, 05, 94, 47, 69, 28, 73, 92, 13, 86, 52, 17, 77, 04, 89, 55, 40,
                           04, 52, 08, 83, 97, 35, 99, 16, 07, 97, 57, 32, 16, 26, 26, 79, 33, 27, 98, 66,
                           88, 36, 68, 87, 57, 62, 20, 72, 03, 46, 33, 67, 46, 55, 12, 32, 63, 93, 53, 69,
                           04, 42, 16, 73, 38, 25, 39, 11, 24, 94, 72, 18, 08, 46, 29, 32, 40, 62, 76, 36,
                           20, 69, 36, 41, 72, 30, 23, 88, 34, 62, 99, 69, 82, 67, 59, 85, 74, 04, 36, 16,
                           20, 73, 35, 29, 78, 31, 90, 01, 74, 31, 49, 71, 48, 86, 81, 16, 23, 57, 05, 54,
                           01, 70, 54, 71, 83, 51, 54, 69, 16, 92, 33, 48, 61, 43, 52, 01, 89, 19, 67, 48};

            int maxProduct = 1;
            int temp = 0;
            for (int i = 0; i < grid.Length; i++)
            {
                if (i <= 396)
                {
                    temp = grid[i] * grid[i + 1] * grid[i + 2] * grid[i + 3];
                    if (temp > maxProduct)
                        maxProduct = temp;
                }

                if (i <= 336)
                {
                    temp = grid[i] * grid[i + 21] * grid[i + 42] * grid[i + 63];
                    if (temp > maxProduct)
                        maxProduct = temp;
                }

                if (i <= 339)
                {
                    temp = grid[i] * grid[i + 20] * grid[i + 40] * grid[i + 60];
                    if (temp > maxProduct)
                        maxProduct = temp;
                }

                if (i % 10 >= 3 && i <= 339)
                {
                    temp = grid[i] * grid[i + 19] * grid[i + 38] * grid[i + 57];
                    if (temp > maxProduct)
                        maxProduct = temp;
                }
            }
            stopwatch.Stop();
            Console.WriteLine("Solution - " + maxProduct);
            Console.WriteLine("Time: " + stopwatch.Elapsed);

        }
        #endregion

        #region Highly divisible triangular number
        static void HighlyDivisibleTriangularNumber()
        {
            ulong factors = 0;
            ulong triangular = 0;
            ulong naturalNumber = 1;
            while (factors < 500)
            {
                factors = 0;
                triangular += naturalNumber++;

                for (ulong i = 1; i <= Math.Sqrt(triangular); i++)
                    if (triangular % i == 0)
                        factors++;

                factors *= 2;
            }
            Console.WriteLine(triangular + "");
        }
        #endregion

        #region Large sum
        static void LargeSum()
        {
            string d = "37107287533902102798797998220837590246510135740250\n" +
             "46376937677490009712648124896970078050417018260538\n" +
             "74324986199524741059474233309513058123726617309629\n" +
             "91942213363574161572522430563301811072406154908250\n" +
             "23067588207539346171171980310421047513778063246676\n" +
             "89261670696623633820136378418383684178734361726757\n" +
             "28112879812849979408065481931592621691275889832738\n" +
             "44274228917432520321923589422876796487670272189318\n" +
             "47451445736001306439091167216856844588711603153276\n" +
             "70386486105843025439939619828917593665686757934951\n" +
             "62176457141856560629502157223196586755079324193331\n" +
             "64906352462741904929101432445813822663347944758178\n" +
             "92575867718337217661963751590579239728245598838407\n" +
             "58203565325359399008402633568948830189458628227828\n" +
             "80181199384826282014278194139940567587151170094390\n" +
             "35398664372827112653829987240784473053190104293586\n" +
             "86515506006295864861532075273371959191420517255829\n" +
             "71693888707715466499115593487603532921714970056938\n" +
             "54370070576826684624621495650076471787294438377604\n" +
             "53282654108756828443191190634694037855217779295145\n" +
             "36123272525000296071075082563815656710885258350721\n" +
             "45876576172410976447339110607218265236877223636045\n" +
             "17423706905851860660448207621209813287860733969412\n" +
             "81142660418086830619328460811191061556940512689692\n" +
             "51934325451728388641918047049293215058642563049483\n" +
             "62467221648435076201727918039944693004732956340691\n" +
             "15732444386908125794514089057706229429197107928209\n" +
             "55037687525678773091862540744969844508330393682126\n" +
             "18336384825330154686196124348767681297534375946515\n" +
             "80386287592878490201521685554828717201219257766954\n" +
             "78182833757993103614740356856449095527097864797581\n" +
             "16726320100436897842553539920931837441497806860984\n" +
             "48403098129077791799088218795327364475675590848030\n" +
             "87086987551392711854517078544161852424320693150332\n" +
             "59959406895756536782107074926966537676326235447210\n" +
             "69793950679652694742597709739166693763042633987085\n" +
             "41052684708299085211399427365734116182760315001271\n" +
             "65378607361501080857009149939512557028198746004375\n" +
             "35829035317434717326932123578154982629742552737307\n" +
             "94953759765105305946966067683156574377167401875275\n" +
             "88902802571733229619176668713819931811048770190271\n" +
             "25267680276078003013678680992525463401061632866526\n" +
             "36270218540497705585629946580636237993140746255962\n" +
             "24074486908231174977792365466257246923322810917141\n" +
             "91430288197103288597806669760892938638285025333403\n" +
             "34413065578016127815921815005561868836468420090470\n" +
             "23053081172816430487623791969842487255036638784583\n" +
             "11487696932154902810424020138335124462181441773470\n" +
             "63783299490636259666498587618221225225512486764533\n" +
             "67720186971698544312419572409913959008952310058822\n" +
             "95548255300263520781532296796249481641953868218774\n" +
             "76085327132285723110424803456124867697064507995236\n" +
             "37774242535411291684276865538926205024910326572967\n" +
             "23701913275725675285653248258265463092207058596522\n" +
             "29798860272258331913126375147341994889534765745501\n" +
             "18495701454879288984856827726077713721403798879715\n" +
             "38298203783031473527721580348144513491373226651381\n" +
             "34829543829199918180278916522431027392251122869539\n" +
             "40957953066405232632538044100059654939159879593635\n" +
             "29746152185502371307642255121183693803580388584903\n" +
             "41698116222072977186158236678424689157993532961922\n" +
             "62467957194401269043877107275048102390895523597457\n" +
             "23189706772547915061505504953922979530901129967519\n" +
             "86188088225875314529584099251203829009407770775672\n" +
             "11306739708304724483816533873502340845647058077308\n" +
             "82959174767140363198008187129011875491310547126581\n" +
             "97623331044818386269515456334926366572897563400500\n" +
             "42846280183517070527831839425882145521227251250327\n" +
             "55121603546981200581762165212827652751691296897789\n" +
             "32238195734329339946437501907836945765883352399886\n" +
             "75506164965184775180738168837861091527357929701337\n" +
             "62177842752192623401942399639168044983993173312731\n" +
             "32924185707147349566916674687634660915035914677504\n" +
             "99518671430235219628894890102423325116913619626622\n" +
             "73267460800591547471830798392868535206946944540724\n" +
             "76841822524674417161514036427982273348055556214818\n" +
             "97142617910342598647204516893989422179826088076852\n" +
             "87783646182799346313767754307809363333018982642090\n" +
             "10848802521674670883215120185883543223812876952786\n" +
             "71329612474782464538636993009049310363619763878039\n" +
             "62184073572399794223406235393808339651327408011116\n" +
             "66627891981488087797941876876144230030984490851411\n" +
             "60661826293682836764744779239180335110989069790714\n" +
             "85786944089552990653640447425576083659976645795096\n" +
             "66024396409905389607120198219976047599490197230297\n" +
             "64913982680032973156037120041377903785566085089252\n" +
             "16730939319872750275468906903707539413042652315011\n" +
             "94809377245048795150954100921645863754710598436791\n" +
             "78639167021187492431995700641917969777599028300699\n" +
             "15368713711936614952811305876380278410754449733078\n" +
             "40789923115535562561142322423255033685442488917353\n" +
             "44889911501440648020369068063960672322193204149535\n" +
             "41503128880339536053299340368006977710650566631954\n" +
             "81234880673210146739058568557934581403627822703280\n" +
             "82616570773948327592232845941706525094512325230608\n" +
             "22918802058777319719839450180888072429661980811197\n" +
             "77158542502016545090413245809786882778948721859617\n" +
             "72107838435069186155435662884062257473692284509516\n" +
             "20849603980134001723930671666823555245252804609722\n" +
             "53503534226472524250874054075591789781264330331690";
            string[] numbers = d.Split('\n');
            int temp = 0;
            string sum = "";
            for (int j = 49; j >= 0; j--)
            {
                for (int i = 0; i < numbers.Length; i++)
                {
                    temp += numbers[i].ValueConvert(j);
                }
                sum = temp % 10 + sum;
                temp /= 10;
            }
            sum = temp + sum;
            Console.WriteLine(sum);
        }
        #endregion

        #region Longest Collatz sequence
        static void LongestCollatzSequence()
        {
            System.Diagnostics.Stopwatch stopwatch = new System.Diagnostics.Stopwatch();
            stopwatch.Start();

            long[] longSeq = new long[1000000];
            long maxSequence = 0;
            long max = 0;
            for (long i = 2; i < 1000000; i++)
            {
                long sequence = 1;
                long current = i;
                while (current != 1)
                {
                    if (current % 2 == 0)
                        current /= 2;
                    else
                        current = current * 3 + 1;

                    if (current < longSeq.Length && longSeq[current] != 0)
                    {
                        sequence += longSeq[current];
                        break;
                    }
                    sequence++;
                }
                longSeq[i] = sequence;
                if (sequence > maxSequence)
                {
                    maxSequence = sequence;
                    max = i;
                }
            }
            Console.WriteLine(" Starting number produces the longest chain: " + max + ". Long chain: " + maxSequence);
            stopwatch.Stop();
            Console.WriteLine("Time: " + stopwatch.Elapsed);
        }
        #endregion

        #region Lattice paths
        static ulong LatticePaths(int sideLenght)
        {
            int[] factorial = new int[sideLenght];
            for (int i = 0; i < sideLenght; i++)
                factorial[i] = sideLenght * 2 - i;
            int device = sideLenght;
            for (int i = 0; device > 0; i++)
            {
                if (device == 10)
                {
                    break;
                }
                if (factorial[i] % device == 0)
                {
                    factorial[i] /= device;
                    i = 0;
                    device--;
                }
            }
            ulong otvet = 1;
            for (int i = 0; i < sideLenght; i++)
                otvet *= (ulong)factorial[i];
            return otvet / mult(10);
        }
        static ulong mult(ulong x)
        {
            ulong a = 1;
            for (ulong i = 2; i <= x; i++)
                a *= i;
            return a;
        }
        #endregion

        #region Power digit sum
        static void PowerDigitSumMethodOne(int powerOf)
        {
            System.Diagnostics.Stopwatch stopwatch = new System.Diagnostics.Stopwatch();
            stopwatch.Start();

            int temp = 0;
            string newNumber = "";
            string number = "1";
            for (int i = 0; i < powerOf; i++)
            {
                for (int j = number.Length - 1; j >= 0; j--)
                {
                    temp += number.ValueConvert(j) * 2;
                    newNumber = (temp % 10).ToString() + newNumber;
                    temp /= 10;
                }
                if (temp != 0)
                    newNumber = temp.ToString() + newNumber;
                temp = 0;
                number = newNumber;
                newNumber = "";
            }
            for (int j = number.Length - 1; j >= 0; j--)
            {
                temp += number.ValueConvert(j);
            }
            Console.WriteLine(temp);
            stopwatch.Stop();
            Console.WriteLine("Time: " + stopwatch.Elapsed);
        }

        static void PowerDigitSumMethodTwo(int powerOf)
        {
            System.Diagnostics.Stopwatch stopwatch = new System.Diagnostics.Stopwatch();
            stopwatch.Start();

            string num = (BigInteger.Pow(2, powerOf)).ToString();
            int add = 0;
            for (int i = 0; i < num.Length; i++)
            {
                add += num.ValueConvert(i);
            }
            Console.WriteLine(add);
            stopwatch.Stop();
            Console.WriteLine("Time: " + stopwatch.Elapsed);
        }

        static void PowerDigitSumMethodThree(int powerOf)
        {
            System.Diagnostics.Stopwatch stopwatch = new System.Diagnostics.Stopwatch();
            stopwatch.Start();

            int result = 0;
            foreach (char item in Math.Pow(2, 1000).ToString("F99").TrimEnd('0').TrimEnd(',').ToCharArray())
            {
                result += Int32.Parse(item.ToString());
            }
            Console.WriteLine(result);

            stopwatch.Stop();
            Console.WriteLine("Time: " + stopwatch.Elapsed);
        }
        #endregion

        #region Number letter counts
        static void NumberLetterCounts()
        {
            string[] allNumbers = {"", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "ten", "eleven", "twelve", "thirteen", "fourteen", "fifteen", "sixteen", "seventeen", "eighteen", "nineteen", "twenty", "thirty", "forty", "fifty", "sixty", "seventy", "eighty", "ninety", "hundred", "thousand" };
            int sum = 0;
            for (int i = 1; i < 20; i++)
            {
                sum += allNumbers[i].Length;
            }
            for (int i = 20; i < 100; i++)
            {
                switch (i / 10)
                {
                    case 2: sum += allNumbers[20].Length; break;
                    case 3: sum += allNumbers[21].Length; break;
                    case 4: sum += allNumbers[22].Length; break;
                    case 5: sum += allNumbers[23].Length; break;
                    case 6: sum += allNumbers[24].Length; break;
                    case 7: sum += allNumbers[25].Length; break;
                    case 8: sum += allNumbers[26].Length; break;
                    case 9: sum += allNumbers[27].Length; break;
                }
                sum += allNumbers[i%10].Length;
            }
            sum *= 10;
            for (int i = 100; i < 1000; i++)
            {
                sum += allNumbers[28].Length + allNumbers[i / 100].Length;
                if (i%100!=0)
                sum +=3;
            }
            Console.WriteLine(sum+ allNumbers[29].Length+3);
        }
        #endregion

        #region Maximum path sum I
        static void MaximumPathSumI()
        {
            //{ 3, 7, 4, 2, 4, 6, 8, 5, 9, 3 }
            //int[][] triangle = new int[4][];
            //triangle[0] = new int[1]       { 3 };
            //triangle[1] = new int[2]     { 7 , 4 };
            //triangle[2] = new int[3]   { 2 , 4 , 6 };
            //triangle[3] = new int[4] { 8 , 5 , 9 , 3 };

            //int[][] triangle = new int[15][];
            //triangle[0] = new int[1] { 75 };
            //triangle[1] = new int[2] { 95, 64 };
            //triangle[2] = new int[3] { 17, 47, 82 };
            //triangle[3] = new int[4] { 18, 35, 87, 10 };
            //triangle[4] = new int[5] { 20, 04, 82, 47, 65 };
            //triangle[5] = new int[6] { 19, 01, 23, 75, 03, 34 };
            //triangle[6] = new int[7] { 88, 02, 77, 73, 07, 63, 67 };
            //triangle[7] = new int[8] { 99, 65, 04, 28, 06, 16, 70, 92 };
            //triangle[8] = new int[9] { 41, 41, 26, 56, 83, 40, 80, 70, 33 };
            //triangle[9] = new int[10] { 41, 48, 72, 33, 47, 32, 37, 16, 94, 29 };
            //triangle[10] = new int[11] { 53, 71, 44, 65, 25, 43, 91, 52, 97, 51, 14 };
            //triangle[11] = new int[12] { 70, 11, 33, 28, 77, 73, 17, 78, 39, 68, 17, 57 };
            //triangle[12] = new int[13] { 91, 71, 52, 38, 17, 14, 91, 43, 58, 50, 27, 29, 48 };
            //triangle[13] = new int[14] { 63, 66, 04, 68, 89, 53, 67, 30, 73, 16, 69, 87, 40, 31 };
            //triangle[14] = new int[15] { 04, 62, 98, 27, 23, 09, 70, 98, 73, 93, 38, 53, 60, 04, 23 };
            int[][] triangle = new int[][]{
                    new int[]{75},
                    new int[]{95,64},
                    new int[]{17,47,82},
                    new int[]{18,35,87,10},
                    new int[]{20,04,82,47,65},
                    new int[]{19,01,23,75,03,34},
                    new int[]{88,02,77,73,07,63,67},
                    new int[]{99,65,04,28,06,16,70,92},
                    new int[]{41,41,26,56,83,40,80,70,33},
                    new int[]{41,48,72,33,47,32,37,16,94,29},
                    new int[]{53,71,44,65,25,43,91,52,97,51,14},
                    new int[]{70,11,33,28,77,73,17,78,39,68,17,57},
                    new int[]{91,71,52,38,17,14,91,43,58,50,27,29,48},
                    new int[]{63,66,04,68,89,53,67,30,73,16,69,87,40,31},
                    new int[]{04,62,98,27,23,09,70,98,73,93,38,53,60,04,23}};


            for (int i = triangle.Length - 2; i >= 0; i--)
                for (int j = 0; j <= i; j++)
                    triangle[i][j] += (triangle[i + 1][j] >= triangle[i + 1][j + 1]) ? triangle[i + 1][j] : triangle[i + 1][j + 1];
            Console.WriteLine(triangle[0][0]);
            //for (int i = 0; i < triangle.Length; i++)
            //{
            //    for (int j = 0; j <= i; j++)
            //        Console.Write(triangle[i][j]+" ");
            //    Console.WriteLine();
            //}

        }




        #endregion

        # region Maximum path sum II
        static void MaximumPathSumII()
        {
            int[][] triangle = new int[][]{
            new int[]{59},
new int[]{73,41},
new int[]{52,40,09},
new int[]{26,53,06,34},
new int[]{10,51,87,86,81},
new int[]{61,95,66,57,25,68},
new int[]{90,81,80,38,92,67,73},
new int[]{30,28,51,76,81,18,75,44},
new int[]{84,14,95,87,62,81,17,78,58},
new int[]{21,46,71,58,02,79,62,39,31,09},
new int[]{56,34,35,53,78,31,81,18,90,93,15},
new int[]{78,53,04,21,84,93,32,13,97,11,37,51},
new int[]{45,03,81,79,05,18,78,86,13,30,63,99,95},
new int[]{39,87,96,28,03,38,42,17,82,87,58,07,22,57},
new int[]{06,17,51,17,07,93,09,07,75,97,95,78,87,08,53},
new int[]{67,66,59,60,88,99,94,65,55,77,55,34,27,53,78,28},
new int[]{76,40,41,04,87,16,09,42,75,69,23,97,30,60,10,79,87},
new int[]{12,10,44,26,21,36,32,84,98,60,13,12,36,16,63,31,91,35},
new int[]{70,39,06,05,55,27,38,48,28,22,34,35,62,62,15,14,94,89,86},
new int[]{66,56,68,84,96,21,34,34,34,81,62,40,65,54,62,05,98,03,02,60},
new int[]{38,89,46,37,99,54,34,53,36,14,70,26,02,90,45,13,31,61,83,73,47},
new int[]{36,10,63,96,60,49,41,05,37,42,14,58,84,93,96,17,09,43,05,43,06,59},
new int[]{66,57,87,57,61,28,37,51,84,73,79,15,39,95,88,87,43,39,11,86,77,74,18},
new int[]{54,42,05,79,30,49,99,73,46,37,50,02,45,09,54,52,27,95,27,65,19,45,26,45},
new int[]{71,39,17,78,76,29,52,90,18,99,78,19,35,62,71,19,23,65,93,85,49,33,75,09,02},
new int[]{33,24,47,61,60,55,32,88,57,55,91,54,46,57,07,77,98,52,80,99,24,25,46,78,79,05},
new int[]{92,09,13,55,10,67,26,78,76,82,63,49,51,31,24,68,05,57,07,54,69,21,67,43,17,63,12},
new int[]{24,59,06,08,98,74,66,26,61,60,13,03,09,09,24,30,71,08,88,70,72,70,29,90,11,82,41,34},
new int[]{66,82,67,04,36,60,92,77,91,85,62,49,59,61,30,90,29,94,26,41,89,04,53,22,83,41,09,74,90},
new int[]{48,28,26,37,28,52,77,26,51,32,18,98,79,36,62,13,17,08,19,54,89,29,73,68,42,14,08,16,70,37},
new int[]{37,60,69,70,72,71,09,59,13,60,38,13,57,36,09,30,43,89,30,39,15,02,44,73,05,73,26,63,56,86,12},
new int[]{55,55,85,50,62,99,84,77,28,85,03,21,27,22,19,26,82,69,54,04,13,07,85,14,01,15,70,59,89,95,10,19},
new int[]{04,09,31,92,91,38,92,86,98,75,21,05,64,42,62,84,36,20,73,42,21,23,22,51,51,79,25,45,85,53,03,43,22},
new int[]{75,63,02,49,14,12,89,14,60,78,92,16,44,82,38,30,72,11,46,52,90,27,08,65,78,03,85,41,57,79,39,52,33,48},
new int[]{78,27,56,56,39,13,19,43,86,72,58,95,39,07,04,34,21,98,39,15,39,84,89,69,84,46,37,57,59,35,59,50,26,15,93},
new int[]{42,89,36,27,78,91,24,11,17,41,05,94,07,69,51,96,03,96,47,90,90,45,91,20,50,56,10,32,36,49,04,53,85,92,25,65},
new int[]{52,09,61,30,61,97,66,21,96,92,98,90,06,34,96,60,32,69,68,33,75,84,18,31,71,50,84,63,03,03,19,11,28,42,75,45,45},
new int[]{61,31,61,68,96,34,49,39,05,71,76,59,62,67,06,47,96,99,34,21,32,47,52,07,71,60,42,72,94,56,82,83,84,40,94,87,82,46},
new int[]{01,20,60,14,17,38,26,78,66,81,45,95,18,51,98,81,48,16,53,88,37,52,69,95,72,93,22,34,98,20,54,27,73,61,56,63,60,34,63},
new int[]{93,42,94,83,47,61,27,51,79,79,45,01,44,73,31,70,83,42,88,25,53,51,30,15,65,94,80,44,61,84,12,77,02,62,02,65,94,42,14,94},
new int[]{32,73,09,67,68,29,74,98,10,19,85,48,38,31,85,67,53,93,93,77,47,67,39,72,94,53,18,43,77,40,78,32,29,59,24,06,02,83,50,60,66},
new int[]{32,01,44,30,16,51,15,81,98,15,10,62,86,79,50,62,45,60,70,38,31,85,65,61,64,06,69,84,14,22,56,43,09,48,66,69,83,91,60,40,36,61},
new int[]{92,48,22,99,15,95,64,43,01,16,94,02,99,19,17,69,11,58,97,56,89,31,77,45,67,96,12,73,08,20,36,47,81,44,50,64,68,85,40,81,85,52,09},
new int[]{91,35,92,45,32,84,62,15,19,64,21,66,06,01,52,80,62,59,12,25,88,28,91,50,40,16,22,99,92,79,87,51,21,77,74,77,07,42,38,42,74,83,02,05},
new int[]{46,19,77,66,24,18,05,32,02,84,31,99,92,58,96,72,91,36,62,99,55,29,53,42,12,37,26,58,89,50,66,19,82,75,12,48,24,87,91,85,02,07,03,76,86},
new int[]{99,98,84,93,07,17,33,61,92,20,66,60,24,66,40,30,67,05,37,29,24,96,03,27,70,62,13,04,45,47,59,88,43,20,66,15,46,92,30,04,71,66,78,70,53,99},
new int[]{67,60,38,06,88,04,17,72,10,99,71,07,42,25,54,05,26,64,91,50,45,71,06,30,67,48,69,82,08,56,80,67,18,46,66,63,01,20,08,80,47,07,91,16,03,79,87},
new int[]{18,54,78,49,80,48,77,40,68,23,60,88,58,80,33,57,11,69,55,53,64,02,94,49,60,92,16,35,81,21,82,96,25,24,96,18,02,05,49,03,50,77,06,32,84,27,18,38},
new int[]{68,01,50,04,03,21,42,94,53,24,89,05,92,26,52,36,68,11,85,01,04,42,02,45,15,06,50,04,53,73,25,74,81,88,98,21,67,84,79,97,99,20,95,04,40,46,02,58,87},
new int[]{94,10,02,78,88,52,21,03,88,60,06,53,49,71,20,91,12,65,07,49,21,22,11,41,58,99,36,16,09,48,17,24,52,36,23,15,72,16,84,56,02,99,43,76,81,71,29,39,49,17},
new int[]{64,39,59,84,86,16,17,66,03,09,43,06,64,18,63,29,68,06,23,07,87,14,26,35,17,12,98,41,53,64,78,18,98,27,28,84,80,67,75,62,10,11,76,90,54,10,05,54,41,39,66},
new int[]{43,83,18,37,32,31,52,29,95,47,08,76,35,11,04,53,35,43,34,10,52,57,12,36,20,39,40,55,78,44,07,31,38,26,08,15,56,88,86,01,52,62,10,24,32,05,60,65,53,28,57,99},
new int[]{03,50,03,52,07,73,49,92,66,80,01,46,08,67,25,36,73,93,07,42,25,53,13,96,76,83,87,90,54,89,78,22,78,91,73,51,69,09,79,94,83,53,09,40,69,62,10,79,49,47,03,81,30},
new int[]{71,54,73,33,51,76,59,54,79,37,56,45,84,17,62,21,98,69,41,95,65,24,39,37,62,03,24,48,54,64,46,82,71,78,33,67,09,16,96,68,52,74,79,68,32,21,13,78,96,60,09,69,20,36},
new int[]{73,26,21,44,46,38,17,83,65,98,07,23,52,46,61,97,33,13,60,31,70,15,36,77,31,58,56,93,75,68,21,36,69,53,90,75,25,82,39,50,65,94,29,30,11,33,11,13,96,02,56,47,07,49,02},
new int[]{76,46,73,30,10,20,60,70,14,56,34,26,37,39,48,24,55,76,84,91,39,86,95,61,50,14,53,93,64,67,37,31,10,84,42,70,48,20,10,72,60,61,84,79,69,65,99,73,89,25,85,48,92,56,97,16},
new int[]{03,14,80,27,22,30,44,27,67,75,79,32,51,54,81,29,65,14,19,04,13,82,04,91,43,40,12,52,29,99,07,76,60,25,01,07,61,71,37,92,40,47,99,66,57,01,43,44,22,40,53,53,09,69,26,81,07},
new int[]{49,80,56,90,93,87,47,13,75,28,87,23,72,79,32,18,27,20,28,10,37,59,21,18,70,04,79,96,03,31,45,71,81,06,14,18,17,05,31,50,92,79,23,47,09,39,47,91,43,54,69,47,42,95,62,46,32,85},
new int[]{37,18,62,85,87,28,64,05,77,51,47,26,30,65,05,70,65,75,59,80,42,52,25,20,44,10,92,17,71,95,52,14,77,13,24,55,11,65,26,91,01,30,63,15,49,48,41,17,67,47,03,68,20,90,98,32,04,40,68},
new int[]{90,51,58,60,06,55,23,68,05,19,76,94,82,36,96,43,38,90,87,28,33,83,05,17,70,83,96,93,06,04,78,47,80,06,23,84,75,23,87,72,99,14,50,98,92,38,90,64,61,58,76,94,36,66,87,80,51,35,61,38},
new int[]{57,95,64,06,53,36,82,51,40,33,47,14,07,98,78,65,39,58,53,06,50,53,04,69,40,68,36,69,75,78,75,60,03,32,39,24,74,47,26,90,13,40,44,71,90,76,51,24,36,50,25,45,70,80,61,80,61,43,90,64,11},
new int[]{18,29,86,56,68,42,79,10,42,44,30,12,96,18,23,18,52,59,02,99,67,46,60,86,43,38,55,17,44,93,42,21,55,14,47,34,55,16,49,24,23,29,96,51,55,10,46,53,27,92,27,46,63,57,30,65,43,27,21,20,24,83},
new int[]{81,72,93,19,69,52,48,01,13,83,92,69,20,48,69,59,20,62,05,42,28,89,90,99,32,72,84,17,08,87,36,03,60,31,36,36,81,26,97,36,48,54,56,56,27,16,91,08,23,11,87,99,33,47,02,14,44,73,70,99,43,35,33},
new int[]{90,56,61,86,56,12,70,59,63,32,01,15,81,47,71,76,95,32,65,80,54,70,34,51,40,45,33,04,64,55,78,68,88,47,31,47,68,87,03,84,23,44,89,72,35,08,31,76,63,26,90,85,96,67,65,91,19,14,17,86,04,71,32,95},
new int[]{37,13,04,22,64,37,37,28,56,62,86,33,07,37,10,44,52,82,52,06,19,52,57,75,90,26,91,24,06,21,14,67,76,30,46,14,35,89,89,41,03,64,56,97,87,63,22,34,03,79,17,45,11,53,25,56,96,61,23,18,63,31,37,37,47},
new int[]{77,23,26,70,72,76,77,04,28,64,71,69,14,85,96,54,95,48,06,62,99,83,86,77,97,75,71,66,30,19,57,90,33,01,60,61,14,12,90,99,32,77,56,41,18,14,87,49,10,14,90,64,18,50,21,74,14,16,88,05,45,73,82,47,74,44},
new int[]{22,97,41,13,34,31,54,61,56,94,03,24,59,27,98,77,04,09,37,40,12,26,87,09,71,70,07,18,64,57,80,21,12,71,83,94,60,39,73,79,73,19,97,32,64,29,41,07,48,84,85,67,12,74,95,20,24,52,41,67,56,61,29,93,35,72,69},
new int[]{72,23,63,66,01,11,07,30,52,56,95,16,65,26,83,90,50,74,60,18,16,48,43,77,37,11,99,98,30,94,91,26,62,73,45,12,87,73,47,27,01,88,66,99,21,41,95,80,02,53,23,32,61,48,32,43,43,83,14,66,95,91,19,81,80,67,25,88},
new int[]{08,62,32,18,92,14,83,71,37,96,11,83,39,99,05,16,23,27,10,67,02,25,44,11,55,31,46,64,41,56,44,74,26,81,51,31,45,85,87,09,81,95,22,28,76,69,46,48,64,87,67,76,27,89,31,11,74,16,62,03,60,94,42,47,09,34,94,93,72},
new int[]{56,18,90,18,42,17,42,32,14,86,06,53,33,95,99,35,29,15,44,20,49,59,25,54,34,59,84,21,23,54,35,90,78,16,93,13,37,88,54,19,86,67,68,55,66,84,65,42,98,37,87,56,33,28,58,38,28,38,66,27,52,21,81,15,08,22,97,32,85,27},
new int[]{91,53,40,28,13,34,91,25,01,63,50,37,22,49,71,58,32,28,30,18,68,94,23,83,63,62,94,76,80,41,90,22,82,52,29,12,18,56,10,08,35,14,37,57,23,65,67,40,72,39,93,39,70,89,40,34,07,46,94,22,20,05,53,64,56,30,05,56,61,88,27},
new int[]{23,95,11,12,37,69,68,24,66,10,87,70,43,50,75,07,62,41,83,58,95,93,89,79,45,39,02,22,05,22,95,43,62,11,68,29,17,40,26,44,25,71,87,16,70,85,19,25,59,94,90,41,41,80,61,70,55,60,84,33,95,76,42,63,15,09,03,40,38,12,03,32},
new int[]{09,84,56,80,61,55,85,97,16,94,82,94,98,57,84,30,84,48,93,90,71,05,95,90,73,17,30,98,40,64,65,89,07,79,09,19,56,36,42,30,23,69,73,72,07,05,27,61,24,31,43,48,71,84,21,28,26,65,65,59,65,74,77,20,10,81,61,84,95,08,52,23,70},
new int[]{47,81,28,09,98,51,67,64,35,51,59,36,92,82,77,65,80,24,72,53,22,07,27,10,21,28,30,22,48,82,80,48,56,20,14,43,18,25,50,95,90,31,77,08,09,48,44,80,90,22,93,45,82,17,13,96,25,26,08,73,34,99,06,49,24,06,83,51,40,14,15,10,25,01},
new int[]{54,25,10,81,30,64,24,74,75,80,36,75,82,60,22,69,72,91,45,67,03,62,79,54,89,74,44,83,64,96,66,73,44,30,74,50,37,05,09,97,70,01,60,46,37,91,39,75,75,18,58,52,72,78,51,81,86,52,08,97,01,46,43,66,98,62,81,18,70,93,73,08,32,46,34},
new int[]{96,80,82,07,59,71,92,53,19,20,88,66,03,26,26,10,24,27,50,82,94,73,63,08,51,33,22,45,19,13,58,33,90,15,22,50,36,13,55,06,35,47,82,52,33,61,36,27,28,46,98,14,73,20,73,32,16,26,80,53,47,66,76,38,94,45,02,01,22,52,47,96,64,58,52,39},
new int[]{88,46,23,39,74,63,81,64,20,90,33,33,76,55,58,26,10,46,42,26,74,74,12,83,32,43,09,02,73,55,86,54,85,34,28,23,29,79,91,62,47,41,82,87,99,22,48,90,20,05,96,75,95,04,43,28,81,39,81,01,28,42,78,25,39,77,90,57,58,98,17,36,73,22,63,74,51},
new int[]{29,39,74,94,95,78,64,24,38,86,63,87,93,06,70,92,22,16,80,64,29,52,20,27,23,50,14,13,87,15,72,96,81,22,08,49,72,30,70,24,79,31,16,64,59,21,89,34,96,91,48,76,43,53,88,01,57,80,23,81,90,79,58,01,80,87,17,99,86,90,72,63,32,69,14,28,88,69},
new int[]{37,17,71,95,56,93,71,35,43,45,04,98,92,94,84,96,11,30,31,27,31,60,92,03,48,05,98,91,86,94,35,90,90,08,48,19,33,28,68,37,59,26,65,96,50,68,22,07,09,49,34,31,77,49,43,06,75,17,81,87,61,79,52,26,27,72,29,50,07,98,86,01,17,10,46,64,24,18,56},
new int[]{51,30,25,94,88,85,79,91,40,33,63,84,49,67,98,92,15,26,75,19,82,05,18,78,65,93,61,48,91,43,59,41,70,51,22,15,92,81,67,91,46,98,11,11,65,31,66,10,98,65,83,21,05,56,05,98,73,67,46,74,69,34,08,30,05,52,07,98,32,95,30,94,65,50,24,63,28,81,99,57},
new int[]{19,23,61,36,09,89,71,98,65,17,30,29,89,26,79,74,94,11,44,48,97,54,81,55,39,66,69,45,28,47,13,86,15,76,74,70,84,32,36,33,79,20,78,14,41,47,89,28,81,05,99,66,81,86,38,26,06,25,13,60,54,55,23,53,27,05,89,25,23,11,13,54,59,54,56,34,16,24,53,44,06},
new int[]{13,40,57,72,21,15,60,08,04,19,11,98,34,45,09,97,86,71,03,15,56,19,15,44,97,31,90,04,87,87,76,08,12,30,24,62,84,28,12,85,82,53,99,52,13,94,06,65,97,86,09,50,94,68,69,74,30,67,87,94,63,07,78,27,80,36,69,41,06,92,32,78,37,82,30,05,18,87,99,72,19,99},
new int[]{44,20,55,77,69,91,27,31,28,81,80,27,02,07,97,23,95,98,12,25,75,29,47,71,07,47,78,39,41,59,27,76,13,15,66,61,68,35,69,86,16,53,67,63,99,85,41,56,08,28,33,40,94,76,90,85,31,70,24,65,84,65,99,82,19,25,54,37,21,46,33,02,52,99,51,33,26,04,87,02,08,18,96},
new int[]{54,42,61,45,91,06,64,79,80,82,32,16,83,63,42,49,19,78,65,97,40,42,14,61,49,34,04,18,25,98,59,30,82,72,26,88,54,36,21,75,03,88,99,53,46,51,55,78,22,94,34,40,68,87,84,25,30,76,25,08,92,84,42,61,40,38,09,99,40,23,29,39,46,55,10,90,35,84,56,70,63,23,91,39},
new int[]{52,92,03,71,89,07,09,37,68,66,58,20,44,92,51,56,13,71,79,99,26,37,02,06,16,67,36,52,58,16,79,73,56,60,59,27,44,77,94,82,20,50,98,33,09,87,94,37,40,83,64,83,58,85,17,76,53,02,83,52,22,27,39,20,48,92,45,21,09,42,24,23,12,37,52,28,50,78,79,20,86,62,73,20,59},
new int[]{54,96,80,15,91,90,99,70,10,09,58,90,93,50,81,99,54,38,36,10,30,11,35,84,16,45,82,18,11,97,36,43,96,79,97,65,40,48,23,19,17,31,64,52,65,65,37,32,65,76,99,79,34,65,79,27,55,33,03,01,33,27,61,28,66,08,04,70,49,46,48,83,01,45,19,96,13,81,14,21,31,79,93,85,50,05},
new int[]{92,92,48,84,59,98,31,53,23,27,15,22,79,95,24,76,05,79,16,93,97,89,38,89,42,83,02,88,94,95,82,21,01,97,48,39,31,78,09,65,50,56,97,61,01,07,65,27,21,23,14,15,80,97,44,78,49,35,33,45,81,74,34,05,31,57,09,38,94,07,69,54,69,32,65,68,46,68,78,90,24,28,49,51,45,86,35},
new int[]{41,63,89,76,87,31,86,09,46,14,87,82,22,29,47,16,13,10,70,72,82,95,48,64,58,43,13,75,42,69,21,12,67,13,64,85,58,23,98,09,37,76,05,22,31,12,66,50,29,99,86,72,45,25,10,28,19,06,90,43,29,31,67,79,46,25,74,14,97,35,76,37,65,46,23,82,06,22,30,76,93,66,94,17,96,13,20,72},
new int[]{63,40,78,08,52,09,90,41,70,28,36,14,46,44,85,96,24,52,58,15,87,37,05,98,99,39,13,61,76,38,44,99,83,74,90,22,53,80,56,98,30,51,63,39,44,30,91,91,04,22,27,73,17,35,53,18,35,45,54,56,27,78,48,13,69,36,44,38,71,25,30,56,15,22,73,43,32,69,59,25,93,83,45,11,34,94,44,39,92},
new int[]{12,36,56,88,13,96,16,12,55,54,11,47,19,78,17,17,68,81,77,51,42,55,99,85,66,27,81,79,93,42,65,61,69,74,14,01,18,56,12,01,58,37,91,22,42,66,83,25,19,04,96,41,25,45,18,69,96,88,36,93,10,12,98,32,44,83,83,04,72,91,04,27,73,07,34,37,71,60,59,31,01,54,54,44,96,93,83,36,04,45},
new int[]{30,18,22,20,42,96,65,79,17,41,55,69,94,81,29,80,91,31,85,25,47,26,43,49,02,99,34,67,99,76,16,14,15,93,08,32,99,44,61,77,67,50,43,55,87,55,53,72,17,46,62,25,50,99,73,05,93,48,17,31,70,80,59,09,44,59,45,13,74,66,58,94,87,73,16,14,85,38,74,99,64,23,79,28,71,42,20,37,82,31,23},
new int[]{51,96,39,65,46,71,56,13,29,68,53,86,45,33,51,49,12,91,21,21,76,85,02,17,98,15,46,12,60,21,88,30,92,83,44,59,42,50,27,88,46,86,94,73,45,54,23,24,14,10,94,21,20,34,23,51,04,83,99,75,90,63,60,16,22,33,83,70,11,32,10,50,29,30,83,46,11,05,31,17,86,42,49,01,44,63,28,60,07,78,95,40},
new int[]{44,61,89,59,04,49,51,27,69,71,46,76,44,04,09,34,56,39,15,06,94,91,75,90,65,27,56,23,74,06,23,33,36,69,14,39,05,34,35,57,33,22,76,46,56,10,61,65,98,09,16,69,04,62,65,18,99,76,49,18,72,66,73,83,82,40,76,31,89,91,27,88,17,35,41,35,32,51,32,67,52,68,74,85,80,57,07,11,62,66,47,22,67},
new int[]{65,37,19,97,26,17,16,24,24,17,50,37,64,82,24,36,32,11,68,34,69,31,32,89,79,93,96,68,49,90,14,23,04,04,67,99,81,74,70,74,36,96,68,09,64,39,88,35,54,89,96,58,66,27,88,97,32,14,06,35,78,20,71,06,85,66,57,02,58,91,72,05,29,56,73,48,86,52,09,93,22,57,79,42,12,01,31,68,17,59,63,76,07,77},
new int[]{73,81,14,13,17,20,11,09,01,83,08,85,91,70,84,63,62,77,37,07,47,01,59,95,39,69,39,21,99,09,87,02,97,16,92,36,74,71,90,66,33,73,73,75,52,91,11,12,26,53,05,26,26,48,61,50,90,65,01,87,42,47,74,35,22,73,24,26,56,70,52,05,48,41,31,18,83,27,21,39,80,85,26,08,44,02,71,07,63,22,05,52,19,08,20},
new int[]{17,25,21,11,72,93,33,49,64,23,53,82,03,13,91,65,85,02,40,05,42,31,77,42,05,36,06,54,04,58,07,76,87,83,25,57,66,12,74,33,85,37,74,32,20,69,03,97,91,68,82,44,19,14,89,28,85,85,80,53,34,87,58,98,88,78,48,65,98,40,11,57,10,67,70,81,60,79,74,72,97,59,79,47,30,20,54,80,89,91,14,05,33,36,79,39},
new int[]{60,85,59,39,60,07,57,76,77,92,06,35,15,72,23,41,45,52,95,18,64,79,86,53,56,31,69,11,91,31,84,50,44,82,22,81,41,40,30,42,30,91,48,94,74,76,64,58,74,25,96,57,14,19,03,99,28,83,15,75,99,01,89,85,79,50,03,95,32,67,44,08,07,41,62,64,29,20,14,76,26,55,48,71,69,66,19,72,44,25,14,01,48,74,12,98,07},
new int[]{64,66,84,24,18,16,27,48,20,14,47,69,30,86,48,40,23,16,61,21,51,50,26,47,35,33,91,28,78,64,43,68,04,79,51,08,19,60,52,95,06,68,46,86,35,97,27,58,04,65,30,58,99,12,12,75,91,39,50,31,42,64,70,04,46,07,98,73,98,93,37,89,77,91,64,71,64,65,66,21,78,62,81,74,42,20,83,70,73,95,78,45,92,27,34,53,71,15},
new int[]{30,11,85,31,34,71,13,48,05,14,44,03,19,67,23,73,19,57,06,90,94,72,57,69,81,62,59,68,88,57,55,69,49,13,07,87,97,80,89,05,71,05,05,26,38,40,16,62,45,99,18,38,98,24,21,26,62,74,69,04,85,57,77,35,58,67,91,79,79,57,86,28,66,34,72,51,76,78,36,95,63,90,08,78,47,63,45,31,22,70,52,48,79,94,15,77,61,67,68},
new int[]{23,33,44,81,80,92,93,75,94,88,23,61,39,76,22,03,28,94,32,06,49,65,41,34,18,23,08,47,62,60,03,63,33,13,80,52,31,54,73,43,70,26,16,69,57,87,83,31,03,93,70,81,47,95,77,44,29,68,39,51,56,59,63,07,25,70,07,77,43,53,64,03,94,42,95,39,18,01,66,21,16,97,20,50,90,16,70,10,95,69,29,06,25,61,41,26,15,59,63,35} };


            for (int i = triangle.Length - 2; i >= 0; i--)
                for (int j = 0; j <= i; j++)
                    triangle[i][j] += Math.Max(triangle[i + 1][j], triangle[i + 1][j + 1]);
            Console.WriteLine(triangle[0][0]);

        }
        #endregion

        #region Counting Sundays
        static void CountingSundays()
        {
            int[] days = { 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };
            int sunday = 0;
            int day = 1;
            for(int i=1;i<=100;i++)
            {
                if (i % 4 == 0)
                    days[1]++;
                for (int month = 0; month < days.Length; month++)
                {
                    for (int j = 1; j <= days[month]; j++)
                    {
                        
                        day++;
                        if (day == 7)
                        {
                            if (j == 1)
                                sunday++;
                            day = 0;
                        }
                    }
                }
                if (i % 4 == 0)
                    days[1]--;
            }
            Console.WriteLine(sunday);
        }
        #endregion

        #region Factorial digit sum
        static void FactorialDigitSum(int n)
        {
            BigInteger  mult = 2;
            int sum = 0;
            for (int i =3;i<=n;i++)
            {
                if (mult % 10 == 0)
                    mult /= 10;
                mult *= i;
            }
            while(mult>0)
            {
                sum += (int)(mult % 10);
                mult /= 10;
            }
            Console.WriteLine(sum);
        }
        #endregion

        #region Amicable numbers
        static void AmicableNumbers()
        {
            int NumberOne, NumberTwo;
            int sum = 0;
            for (int i=10;i<10000;i++)
            {
                NumberOne = SumDivider(i);
                NumberTwo= SumDivider(NumberOne);
                if (i == NumberTwo&& i!=NumberOne)
                {
                    Console.WriteLine(i + " = " + NumberOne);
                    sum += i + NumberOne;
                }
            }
            Console.WriteLine(sum/2);
        }
        static int SumDivider(int dividend)
        {
            int sum = 1;
            for (int divider = 2; divider <= dividend / 2; divider++)
            {
                if (dividend % divider == 0)
                    sum += divider;
            }
            return sum;
        }
        #endregion

        #region Names scores
        static void NamesScores()
        {
            int[] array = { 4, 5, 8, 1, 9, 2, 7, 3, 6, 26, 11, 24, 17, 10, 25, 13, 23, 14, 22, 15, 21, 16, 20, 18, 19, 12 };
            string[] names;
            using (FileStream fstream = File.OpenRead("names.txt"))
            {
                // выделяем массив для считывания данных из файла
                byte[] buffer = new byte[fstream.Length];
                // считываем данные
                fstream.Read(buffer, 0, buffer.Length);
                // декодируем байты в строку
                string textFromFile = Encoding.Default.GetString(buffer);
                names = textFromFile.Split(',');
            }
            decimal[] convertNames = new decimal[names.Length];
            for (int i = 0; i < names.Length; i++)
            {
                for (int j = 0; j < names[i].Length; j++)
                {
                    convertNames[i] *= 100;
                    switch (names[i][j])
                    {
                        case 'A': convertNames[i] += 10; break;
                        case 'B': convertNames[i] += 11; break;
                        case 'C': convertNames[i] += 12; break;
                        case 'D': convertNames[i] += 13; break;
                        case 'E': convertNames[i] += 14; break;
                        case 'F': convertNames[i] += 15; break;
                        case 'G': convertNames[i] += 16; break;
                        case 'H': convertNames[i] += 17; break;
                        case 'I': convertNames[i] += 18; break;
                        case 'J': convertNames[i] += 19; break;
                        case 'K': convertNames[i] += 20; break;
                        case 'L': convertNames[i] += 21; break;
                        case 'M': convertNames[i] += 22; break;
                        case 'N': convertNames[i] += 23; break;
                        case 'O': convertNames[i] += 24; break;
                        case 'P': convertNames[i] += 25; break;
                        case 'Q': convertNames[i] += 26; break;
                        case 'R': convertNames[i] += 27; break;
                        case 'S': convertNames[i] += 28; break;
                        case 'T': convertNames[i] += 29; break;
                        case 'U': convertNames[i] += 30; break;
                        case 'V': convertNames[i] += 31; break;
                        case 'W': convertNames[i] += 32; break;
                        case 'X': convertNames[i] += 33; break;
                        case 'Y': convertNames[i] += 34; break;
                        case 'Z': convertNames[i] += 35; break;
                    }
                }
            }

            QSort(convertNames);

            string[] tmp = new string[names.Length];
            BigInteger sum = 0;
            BigInteger globalsum = 0;
            for (int i = 0; i < names.Length; i++)
            {
                sum = 0;
                while (convertNames[i] != 0)
                {
                    switch (convertNames[i] % 100)
                    {
                        case 10: tmp[i] = 'A' + tmp[i]; sum += 1; break;
                        case 11: tmp[i] = 'B' + tmp[i]; sum += 2; break;
                        case 12: tmp[i] = 'C' + tmp[i]; sum += 3; break;
                        case 13: tmp[i] = 'D' + tmp[i]; sum += 4; break;
                        case 14: tmp[i] = 'E' + tmp[i]; sum += 5; break;
                        case 15: tmp[i] = 'F' + tmp[i]; sum += 6; break;
                        case 16: tmp[i] = 'G' + tmp[i]; sum += 7; break;
                        case 17: tmp[i] = 'H' + tmp[i]; sum += 8; break;
                        case 18: tmp[i] = 'I' + tmp[i]; sum += 9; break;
                        case 19: tmp[i] = 'J' + tmp[i]; sum += 10; break;
                        case 20: tmp[i] = 'K' + tmp[i]; sum += 11; break;
                        case 21: tmp[i] = 'L' + tmp[i]; sum += 12; break;
                        case 22: tmp[i] = 'M' + tmp[i]; sum += 13; break;
                        case 23: tmp[i] = 'N' + tmp[i]; sum += 14; break;
                        case 24: tmp[i] = 'O' + tmp[i]; sum += 15; break;
                        case 25: tmp[i] = 'P' + tmp[i]; sum += 16; break;
                        case 26: tmp[i] = 'Q' + tmp[i]; sum += 17; break;
                        case 27: tmp[i] = 'R' + tmp[i]; sum += 18; break;
                        case 28: tmp[i] = 'S' + tmp[i]; sum += 19; break;
                        case 29: tmp[i] = 'T' + tmp[i]; sum += 20; break;
                        case 30: tmp[i] = 'U' + tmp[i]; sum += 21; break;
                        case 31: tmp[i] = 'V' + tmp[i]; sum += 22; break;
                        case 32: tmp[i] = 'W' + tmp[i]; sum += 23; break;
                        case 33: tmp[i] = 'X' + tmp[i]; sum += 24; break;
                        case 34: tmp[i] = 'Y' + tmp[i]; sum += 25; break;
                        case 35: tmp[i] = 'Z' + tmp[i]; sum += 26; break;
                    }
                    convertNames[i] = Math.Round(convertNames[i] / 100);
                }
                globalsum +=sum* (i + 1);
            }



            Console.WriteLine(globalsum);


            var suma = File.ReadAllText("names.txt")
                .Split(',')
                .Select(n => n.Trim('"'))
                .OrderBy(n => n)
                .Select((name, i) => name.Sum(n => n - 64) * (i + 1))
                .Sum();
            Console.WriteLine($"Answer: {suma}");





        }

        

        static void Swap(ref decimal a, ref decimal b)
        {
            decimal tmp = a;
            a = b;
            b = tmp;
        }

        static void QSort(decimal[] array, int firstIndex = 0, int lastIndex = -1)
        {
            if (lastIndex < 0)
                lastIndex = array.Length - 1;
            if (firstIndex >= lastIndex)
                return;

            int middleIndex = (lastIndex - firstIndex) / 2 + firstIndex;
            int currentIndex = firstIndex;

            Swap(ref array[firstIndex], ref array[middleIndex]);
            for (int i = firstIndex + 1; i <= lastIndex; ++i)
            {
                if (array[i] <= array[firstIndex])
                {
                    Swap(ref array[++currentIndex], ref array[i]);
                }
            }
            Swap(ref array[firstIndex], ref array[currentIndex]);
            QSort(array, firstIndex, currentIndex - 1);
            QSort(array, currentIndex + 1, lastIndex);
        }
        #endregion

        #region
        #endregion

        #region
        #endregion

        #region
        #endregion
    }
    public static class StringExtensions
    {
        public static int ValueConvert(this string x, int position)
        {
            return int.Parse(x[position].ToString());
        }
    }
}

